/**
 * Generated test suite from j2cl_test target
 */
package ${testClass.jsUnitPackageName()};

import jsinterop.annotations.JsAsync;
import jsinterop.annotations.JsMethod;
import jsinterop.annotations.JsPackage;
import jsinterop.annotations.JsType;

@JsType
public class ${testClass.jsUnitAdapterClassName()} {

  @JsType(isNative = true, name = "IThenable", namespace = JsPackage.GLOBAL)
  private interface IThenable<T> {}

  @JsType(isNative = true, name = "TestCase", namespace = "goog.testing")
  private static class GoogTestCase {
    public static native GoogTestCase getActiveTestCase();
    public double promiseTimeout;
  }

  @JsMethod(namespace = JsPackage.GLOBAL)
  private static native void await(IThenable<?> thenable);

  private static IThenable<?> asIThenable(Object thenable) {
    if (thenable == null) {
      throw new IllegalStateException("Test returned null as its promise");
    }
    return (IThenable<?>) thenable;
  }

  private ${testClass.qualifiedName()} actualTest;

  public void setUpPage() throws Throwable {
#foreach($beforeClassMethod in ${testClass.beforeClassMethods()})
    ${testClass.qualifiedName()}.${beforeClassMethod.javaMethodName()}();
#end
  }

  public void tearDownPage() throws Throwable {
#foreach($afterClassMethod in ${testClass.afterClassMethods()})
    ${testClass.qualifiedName()}.${afterClassMethod.javaMethodName()}();
#end
  }

#if($testClass.needsAsyncSetup())
  @JsAsync
#end
  public IThenable<?> setUp() throws Throwable {
    actualTest = new ${testClass.qualifiedName()}();
#foreach($beforeMethod in ${testClass.beforeMethods()})
#if($beforeMethod.isAsync())
      await(asIThenable(actualTest.${beforeMethod.javaMethodName()}()));
#else
      actualTest.${beforeMethod.javaMethodName()}();
#end
#end
    return null;
  }

#if($testClass.needsAsyncTeardown())
  @JsAsync
#end
  public IThenable<?> tearDown() throws Throwable {
    if (actualTest == null) {
      // Test failed to be constructed, thus we can not run its teardown
      return null;
    }

    try {
#foreach($afterMethod in ${testClass.afterMethods()})
#if($afterMethod.isAsync())
      await(asIThenable(actualTest.${afterMethod.javaMethodName()}()));
#else
      actualTest.${afterMethod.javaMethodName()}();
#end
#end
      return null;
    } finally {
      // Ensures that the test instance is always reset to null so that if the
      // next test fails to construct the instance in the setUp, the instance
      // will be null and that will prevent the tearDown from running.
      actualTest = null;
    }
  }

#foreach($testMethod in ${testClass.testMethods()})
#if($testMethod.isAsync())
  @JsAsync
#end
  public IThenable<?> ${testMethod.jsTestMethodName()}() throws Throwable {
#if ($testMethod.expectedExceptionQualifiedName())
    try {
#end

#if($testMethod.isAsync())
      GoogTestCase.getActiveTestCase().promiseTimeout = ${testMethod.timeout()};
      await(asIThenable(actualTest.${testMethod.javaMethodName()}()));
#else
      actualTest.${testMethod.javaMethodName()}();
#end

#if ($testMethod.expectedExceptionQualifiedName())
    } catch (${testMethod.expectedExceptionQualifiedName()} e) {
      return null;
    }
    throw new Exception("expected exception was not thrown");
#else
    return null;
#end

  }
#end
}
