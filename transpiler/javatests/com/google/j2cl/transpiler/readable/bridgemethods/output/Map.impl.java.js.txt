goog.module('com.google.j2cl.transpiler.readable.bridgemethods.Map$impl');

const $Util = goog.require('nativebootstrap.Util$impl');

let $LambdaAdaptor = goog.forwardDeclare('com.google.j2cl.transpiler.readable.bridgemethods.Map.$LambdaAdaptor$impl');

/**
 * @interface
 * @template K, V
 */
class Map {
  /** @abstract @return {V} */
  m_put__java_lang_Object__java_lang_Object(/** K */ key, /** V */ value) {}
  /** @template K, V @return {Map<K, V>} */
  static $adapt(/** ?function(K, V):V */ fn) {
    Map.$clinit();
    return /**@type {!$LambdaAdaptor<K, V>}*/ (new $LambdaAdaptor(fn));
  }

  static $clinit() {
    Map.$clinit = () => {};
    Map.$loadModules();
  }

  static $markImplementor(/** Function*/ ctor) {
    ctor.prototype
        .$implements__com_google_j2cl_transpiler_readable_bridgemethods_Map =
        true;
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance != null &&
        !!instance
              .$implements__com_google_j2cl_transpiler_readable_bridgemethods_Map;
  }

  static $loadModules() {
    $LambdaAdaptor = goog.module.get(
        'com.google.j2cl.transpiler.readable.bridgemethods.Map.$LambdaAdaptor$impl');
  }
}
$Util.$setClassMetadataForInterface(
    Map, 'com.google.j2cl.transpiler.readable.bridgemethods.Map');

Map.$markImplementor(/** @type {Function} */ (Map));

exports = Map;
//# sourceMappingURL=Map.js.map
