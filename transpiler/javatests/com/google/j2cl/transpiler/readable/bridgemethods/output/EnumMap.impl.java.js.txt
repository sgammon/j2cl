goog.module('com.google.j2cl.transpiler.readable.bridgemethods.EnumMap$impl');

const AbstractMap = goog.require('com.google.j2cl.transpiler.readable.bridgemethods.AbstractMap$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let Enum = goog.forwardDeclare('java.lang.Enum$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');

/**
 * @template K, V
 * @extends {AbstractMap<K, V>}
 */
class EnumMap extends AbstractMap {
  /** @protected */
  constructor() {
    super();
  }
  /** @template K, V @return {!EnumMap<K, V>} */
  static $create__() {
    EnumMap.$clinit();
    let $instance = new EnumMap();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_bridgemethods_EnumMap__();
    return $instance;
  }

  $ctor__com_google_j2cl_transpiler_readable_bridgemethods_EnumMap__() {
    this.$ctor__com_google_j2cl_transpiler_readable_bridgemethods_AbstractMap__();
  }
  /** @return {V} */
  m_put__java_lang_Enum__java_lang_Object(/** K */ key, /** V */ value) {
    return value;
  }
  // Bridge method.
  /** @override @return {V} */
  m_put__java_lang_Object__java_lang_Object(/** * */ arg0, /** * */ arg1) {
    return this.m_put__java_lang_Enum__java_lang_Object(
        /**@type {K}*/ ($Casts.$to(arg0, Enum)), arg1);
  }

  static $clinit() {
    EnumMap.$clinit = () => {};
    EnumMap.$loadModules();
    AbstractMap.$clinit();
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance instanceof EnumMap;
  }

  static $loadModules() {
    Enum = goog.module.get('java.lang.Enum$impl');
    $Casts = goog.module.get('vmbootstrap.Casts$impl');
  }
}
$Util.$setClassMetadata(
    EnumMap, 'com.google.j2cl.transpiler.readable.bridgemethods.EnumMap');

exports = EnumMap;
//# sourceMappingURL=EnumMap.js.map
