goog.module('com.google.j2cl.transpiler.readable.bridgemethods.AbstractMap$impl');

const Map = goog.require('com.google.j2cl.transpiler.readable.bridgemethods.Map$impl');
const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

/**
 * @template K, V
 * @implements {Map<K, V>}
 */
class AbstractMap extends j_l_Object {
  /** @protected */
  constructor() {
    super();
  }
  /** @template K, V @return {!AbstractMap<K, V>} */
  static $create__() {
    AbstractMap.$clinit();
    let $instance = new AbstractMap();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_bridgemethods_AbstractMap__();
    return $instance;
  }

  $ctor__com_google_j2cl_transpiler_readable_bridgemethods_AbstractMap__() {
    this.$ctor__java_lang_Object__();
  }
  /** @override @return {V} */
  m_put__java_lang_Object__java_lang_Object(/** K */ key, /** V */ value) {
    return value;
  }

  static $clinit() {
    AbstractMap.$clinit = () => {};
    AbstractMap.$loadModules();
    j_l_Object.$clinit();
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance instanceof AbstractMap;
  }

  static $loadModules() {}
}
$Util.$setClassMetadata(
    AbstractMap,
    'com.google.j2cl.transpiler.readable.bridgemethods.AbstractMap');

Map.$markImplementor(AbstractMap);

exports = AbstractMap;
//# sourceMappingURL=AbstractMap.js.map
