goog.module('typeannotations.ChildWithNonNullableParent$impl');

const $Util = goog.require('nativebootstrap.Util$impl');
const ParametricType = goog.require('typeannotations.ParametricType$impl');
const Parent = goog.require('typeannotations.Parent$impl');

let List = goog.forwardDeclare('java.util.List$impl');
let Map = goog.forwardDeclare('java.util.Map$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');

/**
 * @implements {ParametricType<!Parent>}
 */
class ChildWithNonNullableParent extends Parent {
  /** @protected */
  constructor() {
    super();
  }
  /** @return {!ChildWithNonNullableParent} */
  static $create__() {
    ChildWithNonNullableParent.$clinit();
    let $instance = new ChildWithNonNullableParent();
    $instance.$ctor__typeannotations_ChildWithNonNullableParent__();
    return $instance;
  }

  $ctor__typeannotations_ChildWithNonNullableParent__() {
    this.$ctor__typeannotations_Parent__();
  }
  // Default method forwarding stub.
  /** @override @return {!List<!Parent>} */
  m_m__java_util_List(
      /**
         !List<!Map<!Array<string>, Map<Array<!List<string>>,
         !Array<?string>>>>
       */
      arg0) {
    return /**@type {!List<!Parent>}*/ (
        ParametricType
            .m_m__$default__typeannotations_ParametricType__java_util_List(
                this, arg0));
  }
  // Bridge method.
  /** @override @return {Parent} */
  m_m__java_lang_String__java_lang_Object(
      /** string */ arg0, /** Parent */ arg1) {
    return this.m_m__java_lang_String__typeannotations_Parent(
        arg0, /**@type {Parent}*/ ($Casts.$to(arg1, Parent)));
  }
  // Bridge method.
  /** @override @return {List<!Parent>} */
  m_m__java_util_List__java_lang_Object(
      /** List<string> */ arg0, /** Parent */ arg1) {
    return this.m_m__java_util_List__typeannotations_Parent(
        arg0, /**@type {Parent}*/ ($Casts.$to(arg1, Parent)));
  }

  static $clinit() {
    ChildWithNonNullableParent.$clinit = () => {};
    ChildWithNonNullableParent.$loadModules();
    Parent.$clinit();
    ParametricType.$clinit();
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance instanceof ChildWithNonNullableParent;
  }

  static $loadModules() {
    $Casts = goog.module.get('vmbootstrap.Casts$impl');
  }
}
ParametricType.$markImplementor(ChildWithNonNullableParent);
$Util.$setClassMetadata(
    ChildWithNonNullableParent, 'typeannotations.ChildWithNonNullableParent');

exports = ChildWithNonNullableParent;

//# sourceMappingURL=ChildWithNonNullableParent.js.map
