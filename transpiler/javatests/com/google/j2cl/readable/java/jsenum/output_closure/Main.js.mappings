[Main] => [Main]
[Main] => [constructor]
[Main] => [super();] "jsenum.Main.<synthetic: ctor_js>"
[Main] => [$create__]
[Main] => [Main.$clinit();] "jsenum.Main.<synthetic: ctor_create>"
[Main] => [let $instance = new Main();] "jsenum.Main.<synthetic: ctor_create>"
[Main] => [$instance.$ctor__jsenum_Main__();] "jsenum.Main.<synthetic: ctor_create>"
[Main] => [return $instance;] "jsenum.Main.<synthetic: ctor_create>"
[Main] => [$ctor__jsenum_Main__]
[Main] => [this.$ctor__java_lang_Object__();] "jsenum.Main.<init>"
[testJsEnumSwitch] => [m_testJsEnumSwitch__]
[testJsEnumSwitch] => [Main.$clinit();] "jsenum.Main.testJsEnumSwitch"
[ComparableJsEnum comparableJsEnum =
        ComparableJsEnum.ONE.getValue() == 1 ? ComparableJsEnum.TWO : null;] => [let comparableJsEnum = $Overlay.m_getValue__$devirt__jsenum_Main_ComparableJsEnum(ComparableJsEnum.ONE) == 1 ? ComparableJsEnum.TWO : /**@type {?ComparableJsEnum}*/ ($Enums.unbox(null));] "jsenum.Main.testJsEnumSwitch"
[comparableJsEnum] => [comparableJsEnum] "comparableJsEnum"
[switch (comparableJsEnum) {
      case TWO:
...      default:
    }] => [switch (InternalPreconditions.m_checkNotNull__java_lang_Object(comparableJsEnum)) {
   case ComparableJsEnum.TWO:
...   default:
  }] "jsenum.Main.testJsEnumSwitch"
[break;] => [break;] "jsenum.Main.testJsEnumSwitch"
[Comparable comparable = comparableJsEnum;] => [let comparable = $Enums.boxComparable(comparableJsEnum, $Overlay);] "jsenum.Main.testJsEnumSwitch"
[comparable] => [comparable] "comparable"
[comparableJsEnum = (ComparableJsEnum) comparable;] => [comparableJsEnum = /**@type {?ComparableJsEnum}*/ ($Enums.unbox($Casts.$to(comparable, $Overlay)));] "jsenum.Main.testJsEnumSwitch"
[IntJsEnum intJsEnum = IntJsEnum.ELEVEN.getValue() == 10 ? IntJsEnum.ELEVEN : null;] => [let intJsEnum = IntJsEnum_$Overlay.m_getValue__$devirt__jsenum_Main_IntJsEnum(IntJsEnum.ELEVEN) == 10 ? IntJsEnum.ELEVEN : /**@type {?IntJsEnum}*/ ($Enums.unbox(null));] "jsenum.Main.testJsEnumSwitch"
[intJsEnum] => [intJsEnum] "intJsEnum"
[switch (intJsEnum) {
      case TWENTY:
...      default:
    }] => [switch (InternalPreconditions.m_checkNotNull__java_lang_Object(intJsEnum)) {
   case IntJsEnum.TWENTY:
...   default:
  }] "jsenum.Main.testJsEnumSwitch"
[break;] => [break;] "jsenum.Main.testJsEnumSwitch"
[Object o = intJsEnum;] => [let o = $Enums.box(intJsEnum, IntJsEnum_$Overlay);] "jsenum.Main.testJsEnumSwitch"
[o] => [o] "o"
[intJsEnum = (IntJsEnum) o;] => [intJsEnum = /**@type {?IntJsEnum}*/ ($Enums.unbox($Casts.$to(o, IntJsEnum_$Overlay)));] "jsenum.Main.testJsEnumSwitch"
[boolean equal = intJsEnum == IntJsEnum.TWENTY;] => [let equal = $Equality.$same(intJsEnum, IntJsEnum.TWENTY);] "jsenum.Main.testJsEnumSwitch"
[equal] => [equal] "equal"
[boolean isInstance = intJsEnum instanceof IntJsEnum;] => [let isInstance = !$Equality.$same(intJsEnum, null);] "jsenum.Main.testJsEnumSwitch"
[isInstance] => [isInstance] "isInstance"
[isInstance = intJsEnum instanceof Comparable;] => [isInstance = Comparable.$isInstance($Enums.box(intJsEnum, IntJsEnum_$Overlay));] "jsenum.Main.testJsEnumSwitch"
[StringJsEnum stringJsEnum = StringJsEnum.ONE.getValue() == "10" ? StringJsEnum.THREE : null;] => [let stringJsEnum = $Equality.$same(StringJsEnum_$Overlay.m_getValue__$devirt__jsenum_Main_StringJsEnum(StringJsEnum.ONE), "10") ? StringJsEnum.THREE : /**@type {?StringJsEnum}*/ ($Enums.unbox(null));] "jsenum.Main.testJsEnumSwitch"
[stringJsEnum] => [stringJsEnum] "stringJsEnum"
[switch (stringJsEnum) {
      case ONE:
...      default:
    }] => [switch (InternalPreconditions.m_checkNotNull__java_lang_Object(stringJsEnum)) {
   case StringJsEnum.ONE:
...   default:
  }] "jsenum.Main.testJsEnumSwitch"
[break;] => [break;] "jsenum.Main.testJsEnumSwitch"
[NativeStringEnum.ONE.compareTo(NativeStringEnum.THREE);] => [$Comparables.m_compareTo__java_lang_Comparable__java_lang_Object(NativeStringEnum.ONE, NativeStringEnum.THREE);] "jsenum.Main.testJsEnumSwitch"
[NativeStringEnum.ONE.equals(NativeStringEnum.THREE);] => [$Objects.m_equals__java_lang_Object__java_lang_Object(NativeStringEnum.ONE, NativeStringEnum.THREE);] "jsenum.Main.testJsEnumSwitch"
[ComparableJsEnum.ONE.compareTo(ComparableJsEnum.ZERO);] => [$Comparables.m_compareTo__java_lang_Comparable__java_lang_Object($Enums.boxComparable(ComparableJsEnum.ONE, $Overlay), $Enums.boxComparable(ComparableJsEnum.ZERO, $Overlay));] "jsenum.Main.testJsEnumSwitch"
[ComparableJsEnum.ONE.equals(ComparableJsEnum.ZERO);] => [$Objects.m_equals__java_lang_Object__java_lang_Object($Enums.boxComparable(ComparableJsEnum.ONE, $Overlay), $Enums.boxComparable(ComparableJsEnum.ZERO, $Overlay));] "jsenum.Main.testJsEnumSwitch"
[Supplier<ComparableJsEnum> supplier = () -> ComparableJsEnum.ONE;] => [let supplier = Supplier.$adapt(() =>{
   return $Enums.boxComparable(ComparableJsEnum.ONE, $Overlay);
  });] "jsenum.Main.testJsEnumSwitch"
[supplier] => [supplier] "supplier"
[ComparableJsEnum.ONE] => [return $Enums.boxComparable(ComparableJsEnum.ONE, $Overlay);] "jsenum.Main.<lambda in testJsEnumSwitch>"
[Consumer<ComparableJsEnum> consummer = e -> e.ordinal();] => [let consummer = Consumer.$adapt((e) =>{
   let e_1 = /**@type {?ComparableJsEnum}*/ ($Enums.unbox($Casts.$to(e, $Overlay)));
  });] "jsenum.Main.testJsEnumSwitch"
[consummer] => [consummer] "consummer"
[e] => [e] "e"
[e -> e.ordinal()] => [let e_1 = /**@type {?ComparableJsEnum}*/ ($Enums.unbox($Casts.$to(e, $Overlay)));] "jsenum.Main.<lambda in testJsEnumSwitch>"
[e] => [e_1] "e"
[testBoxUnboxWithTypeInference] => [m_testBoxUnboxWithTypeInference__]
[TemplatedField<ComparableJsEnum> templatedField =
        new TemplatedField<ComparableJsEnum>(ComparableJsEnum.ONE);] => [let templatedField = /**@type {!TemplatedField<*>}*/ (TemplatedField.$create__java_lang_Object($Enums.boxComparable(ComparableJsEnum.ONE, $Overlay)));] "jsenum.Main.testBoxUnboxWithTypeInference"
[templatedField] => [templatedField] "templatedField"
[ComparableJsEnum unboxed = templatedField.getValue();] => [let unboxed = /**@type {?ComparableJsEnum}*/ ($Enums.unbox($Casts.$to(templatedField.m_getValue___$pp_jsenum(), $Overlay)));] "jsenum.Main.testBoxUnboxWithTypeInference"
[unboxed] => [unboxed] "unboxed"
[unboxed = templatedField.value;] => [unboxed = /**@type {?ComparableJsEnum}*/ ($Enums.unbox($Casts.$to(templatedField.f_value__jsenum_Main_TemplatedField, $Overlay)));] "jsenum.Main.testBoxUnboxWithTypeInference"
[templatedField.value = ComparableJsEnum.ONE;] => [templatedField.f_value__jsenum_Main_TemplatedField = $Enums.boxComparable(ComparableJsEnum.ONE, $Overlay);] "jsenum.Main.testBoxUnboxWithTypeInference"
[Arrays.asList(ComparableJsEnum.ONE);] => [Arrays.m_asList__arrayOf_java_lang_Object([$Enums.boxComparable(ComparableJsEnum.ONE, $Overlay)]);] "jsenum.Main.testBoxUnboxWithTypeInference"
[templatedField.getValue().ordinal();] => [$Enums.unbox($Casts.$to(templatedField.m_getValue___$pp_jsenum(), $Overlay));] "jsenum.Main.testBoxUnboxWithTypeInference"
[boolean b = ComparableJsEnum.ONE == boxingPassthrough(ComparableJsEnum.ONE);] => [let b = $Equality.$same($Enums.boxComparable(ComparableJsEnum.ONE, $Overlay), Main.m_boxingPassthrough__java_lang_Object($Enums.boxComparable(ComparableJsEnum.ONE, $Overlay)));] "jsenum.Main.testBoxUnboxWithTypeInference"
[b] => [b] "b"
[boxingPassthrough] => [m_boxingPassthrough__java_lang_Object]
[t] => [t] "t"
[return t;] => [return t;] "jsenum.Main.boxingPassthrough"
[Main] => [$clinit]
[Main] => [Main.$clinit = () =>{};] "jsenum.Main.<clinit>"
[Main] => [Main.$loadModules();] "jsenum.Main.<clinit>"
[Main] => [j_l_Object.$clinit();] "jsenum.Main.<clinit>"

