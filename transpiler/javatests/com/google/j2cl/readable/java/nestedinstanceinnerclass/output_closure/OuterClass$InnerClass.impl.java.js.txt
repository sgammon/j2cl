goog.module('nestedinstanceinnerclass.OuterClass.InnerClass$impl');

const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let OuterClass = goog.forwardDeclare('nestedinstanceinnerclass.OuterClass$impl');

class InnerClass extends j_l_Object {
  /** @protected */
  constructor() {
    super();
    /**@type {OuterClass}*/
    this.$outer_this__nestedinstanceinnerclass_OuterClass_InnerClass;
  }
  /** @return {!InnerClass} */
  static $create__nestedinstanceinnerclass_OuterClass(
      /** OuterClass */ $outer_this) {
    InnerClass.$clinit();
    let $instance = new InnerClass();
    $instance
        .$ctor__nestedinstanceinnerclass_OuterClass_InnerClass__nestedinstanceinnerclass_OuterClass(
            $outer_this);
    return $instance;
  }

  $ctor__nestedinstanceinnerclass_OuterClass_InnerClass__nestedinstanceinnerclass_OuterClass(
      /** OuterClass */ $outer_this) {
    this.$outer_this__nestedinstanceinnerclass_OuterClass_InnerClass =
        $outer_this;
    this.$ctor__java_lang_Object__();
  }

  static $clinit() {
    InnerClass.$clinit = () => {};
    InnerClass.$loadModules();
    j_l_Object.$clinit();
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance instanceof InnerClass;
  }

  static $loadModules() {}
}
$Util.$setClassMetadata(
    InnerClass, 'nestedinstanceinnerclass.OuterClass$InnerClass');

exports = InnerClass;

//# sourceMappingURL=OuterClass$InnerClass.js.map
