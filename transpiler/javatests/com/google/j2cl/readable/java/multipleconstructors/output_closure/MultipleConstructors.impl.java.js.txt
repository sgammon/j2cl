goog.module('multipleconstructors.MultipleConstructors$impl');

const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

class MultipleConstructors extends j_l_Object {
  /** @protected */
  constructor() {
    super();
    /**@type {number}*/
    this.f_id__multipleconstructors_MultipleConstructors_ = 0;
    /**@type {boolean}*/
    this.f_flag__multipleconstructors_MultipleConstructors_ = false;
  }
  // Factory method corresponding to constructor 'MultipleConstructors(int)'.
  /** @return {!MultipleConstructors} */
  static $create__int(/** number */ id) {
    MultipleConstructors.$clinit();
    let $instance = new MultipleConstructors();
    $instance.$ctor__multipleconstructors_MultipleConstructors__int(id);
    return $instance;
  }
  // Initialization from constructor 'MultipleConstructors(int)'.

  $ctor__multipleconstructors_MultipleConstructors__int(/** number */ id) {
    this.$ctor__java_lang_Object__();
    this.f_id__multipleconstructors_MultipleConstructors_ = id;
    this.f_flag__multipleconstructors_MultipleConstructors_ = id == 0;
  }
  // Factory method corresponding to constructor
  // 'MultipleConstructors(boolean)'.
  /** @return {!MultipleConstructors} */
  static $create__boolean(/** boolean */ flag) {
    MultipleConstructors.$clinit();
    let $instance = new MultipleConstructors();
    $instance.$ctor__multipleconstructors_MultipleConstructors__boolean(flag);
    return $instance;
  }
  // Initialization from constructor 'MultipleConstructors(boolean)'.

  $ctor__multipleconstructors_MultipleConstructors__boolean(
      /** boolean */ flag) {
    this.$ctor__java_lang_Object__();
    this.f_id__multipleconstructors_MultipleConstructors_ = -1 | 0;
    this.f_flag__multipleconstructors_MultipleConstructors_ = flag;
  }
  // Factory method corresponding to constructor 'MultipleConstructors(int,
  // boolean)'.
  /** @return {!MultipleConstructors} */
  static $create__int__boolean(/** number */ id, /** boolean */ flag) {
    MultipleConstructors.$clinit();
    let $instance = new MultipleConstructors();
    $instance.$ctor__multipleconstructors_MultipleConstructors__int__boolean(
        id, flag);
    return $instance;
  }
  // Initialization from constructor 'MultipleConstructors(int, boolean)'.

  $ctor__multipleconstructors_MultipleConstructors__int__boolean(
      /** number */ id, /** boolean */ flag) {
    this.$ctor__java_lang_Object__();
    this.f_id__multipleconstructors_MultipleConstructors_ = id;
    this.f_flag__multipleconstructors_MultipleConstructors_ = flag;
  }

  static $clinit() {
    MultipleConstructors.$clinit = () => {};
    MultipleConstructors.$loadModules();
    j_l_Object.$clinit();
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance instanceof MultipleConstructors;
  }

  static $loadModules() {}
}
$Util.$setClassMetadata(
    MultipleConstructors, 'multipleconstructors.MultipleConstructors');

exports = MultipleConstructors;

//# sourceMappingURL=MultipleConstructors.js.map
