goog.module('genericanddefaultmethods.ConcreteClass$impl');

const GenericClass = goog.require('genericanddefaultmethods.GenericClass$impl');
const InterfaceWithDefault = goog.require('genericanddefaultmethods.InterfaceWithDefault$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let j_l_String = goog.forwardDeclare('java.lang.String$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');

/**
 * @extends {GenericClass<?string>}
 * @implements {InterfaceWithDefault}
 */
class ConcreteClass extends GenericClass {
  /** @protected */
  constructor() {
    super();
  }
  /** @return {!ConcreteClass} */
  static $create__() {
    ConcreteClass.$clinit();
    let $instance = new ConcreteClass();
    $instance.$ctor__genericanddefaultmethods_ConcreteClass__();
    return $instance;
  }

  $ctor__genericanddefaultmethods_ConcreteClass__() {
    this.$ctor__genericanddefaultmethods_GenericClass__();
  }
  // Specialized bridge method.
  /** @override */
  m_foo__java_lang_String(/** ?string */ arg0) {
    super.m_foo__java_lang_Object(arg0);
  }
  // Bridge method.
  /** @override */
  m_foo__java_lang_Object(/** ?string */ arg0) {
    this.m_foo__java_lang_String(
        /**@type {?string}*/ ($Casts.$to(arg0, j_l_String)));
  }

  static $clinit() {
    ConcreteClass.$clinit = () => {};
    ConcreteClass.$loadModules();
    GenericClass.$clinit();
    InterfaceWithDefault.$clinit();
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance instanceof ConcreteClass;
  }

  static $loadModules() {
    j_l_String = goog.module.get('java.lang.String$impl');
    $Casts = goog.module.get('vmbootstrap.Casts$impl');
  }
}
InterfaceWithDefault.$markImplementor(ConcreteClass);
$Util.$setClassMetadata(
    ConcreteClass, 'genericanddefaultmethods.ConcreteClass');

exports = ConcreteClass;

//# sourceMappingURL=ConcreteClass.js.map
