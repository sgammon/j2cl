goog.module('methodreferences.MethodReferences.ArrayProducer$impl');

const $Util = goog.require('nativebootstrap.Util$impl');

let $LambdaAdaptor = goog.forwardDeclare('methodreferences.MethodReferences.ArrayProducer.$LambdaAdaptor$impl');

/**
 * @interface
 * @template T
 */
class ArrayProducer {
  /** @abstract @return {Array<T>} */
  m_produce__int(/** number */ size) {}
  /** @template T @return {ArrayProducer<T>} */
  static $adapt(/** ?function(number):Array<T> */ fn) {
    ArrayProducer.$clinit();
    return /**@type {!$LambdaAdaptor<T>}*/ (new $LambdaAdaptor(fn));
  }

  static $clinit() {
    ArrayProducer.$clinit = () => {};
    ArrayProducer.$loadModules();
  }

  static $markImplementor(/** Function */ ctor) {
    ctor.prototype
        .$implements__methodreferences_MethodReferences_ArrayProducer = true;
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance != null &&
        !!instance.$implements__methodreferences_MethodReferences_ArrayProducer;
  }

  static $loadModules() {
    $LambdaAdaptor = goog.module.get(
        'methodreferences.MethodReferences.ArrayProducer.$LambdaAdaptor$impl');
  }
}
ArrayProducer.$markImplementor(/**@type {Function}*/ (ArrayProducer));
$Util.$setClassMetadataForInterface(
    ArrayProducer, 'methodreferences.MethodReferences$ArrayProducer');

exports = ArrayProducer;

//# sourceMappingURL=MethodReferences$ArrayProducer.js.map
