goog.module('interfacejsbridge.MyInterface.$LambdaAdaptor$impl');

const MyInterface = goog.require('interfacejsbridge.MyInterface$impl');
const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

/**
 * @implements {MyInterface}
 */
class $LambdaAdaptor extends j_l_Object {
  constructor(/** ?function(number):number */ fn) {
    $LambdaAdaptor.$clinit();
    super();
    /**@type {?function(number):number}*/
    this.f_fn__interfacejsbridge_MyInterface_$LambdaAdaptor;
    this.$ctor__interfacejsbridge_MyInterface_$LambdaAdaptor__interfacejsbridge_MyInterface_$JsFunction(
        fn);
  }

  $ctor__interfacejsbridge_MyInterface_$LambdaAdaptor__interfacejsbridge_MyInterface_$JsFunction(
      /** ?function(number):number */ fn) {
    this.$ctor__java_lang_Object__();
    this.f_fn__interfacejsbridge_MyInterface_$LambdaAdaptor = fn;
  }
  /** @override @return {number} */
  m_foo__int(/** number */ arg0) {
    let /** ?function(number):number */ $function;
    return (
        $function = this.f_fn__interfacejsbridge_MyInterface_$LambdaAdaptor,
        $function(arg0));
  }

  static $clinit() {
    $LambdaAdaptor.$clinit = () => {};
    $LambdaAdaptor.$loadModules();
    j_l_Object.$clinit();
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance instanceof $LambdaAdaptor;
  }

  static $loadModules() {}
}
MyInterface.$markImplementor($LambdaAdaptor);
$Util.$setClassMetadata(
    $LambdaAdaptor, 'interfacejsbridge.MyInterface$$LambdaAdaptor');

exports = $LambdaAdaptor;

//# sourceMappingURL=MyInterface$$LambdaAdaptor.js.map
