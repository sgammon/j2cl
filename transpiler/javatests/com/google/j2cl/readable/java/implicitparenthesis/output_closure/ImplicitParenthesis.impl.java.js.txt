goog.module('implicitparenthesis.ImplicitParenthesis$impl');

const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let Boolean = goog.forwardDeclare('java.lang.Boolean$impl');
let Integer = goog.forwardDeclare('java.lang.Integer$impl');
let $Asserts = goog.forwardDeclare('vmbootstrap.Asserts$impl');

class ImplicitParenthesis extends j_l_Object {
  /** @protected */
  constructor() {
    super();
  }
  /** @return {!ImplicitParenthesis} */
  static $create__() {
    ImplicitParenthesis.$clinit();
    let $instance = new ImplicitParenthesis();
    $instance.$ctor__implicitparenthesis_ImplicitParenthesis__();
    return $instance;
  }

  $ctor__implicitparenthesis_ImplicitParenthesis__() {
    this.$ctor__java_lang_Object__();
  }

  m_test__() {
    ImplicitParenthesis.m_examples__();
    ImplicitParenthesis.m_nonExamples__();
  }

  static m_examples__() {
    let /** number */ primitiveInt;
    let /** Integer */ boxedInt;
    {
      primitiveInt = 5;
      boxedInt = Integer.$create__int(10);
      primitiveInt = (primitiveInt == 5 ? Integer.$create__int(15) :
                                          Integer.$create__int(30))
                         .m_intValue__();
      $Asserts.$assert(primitiveInt == 15);
    }
    {
      primitiveInt = 5;
      boxedInt = Integer.$create__int(10);
      primitiveInt = (boxedInt = Integer.m_valueOf__int(
                          boxedInt.m_intValue__() + primitiveInt | 0))
                         .m_intValue__();
      $Asserts.$assert(primitiveInt == 15);
    }
    {
      primitiveInt = 5;
      boxedInt = Integer.$create__int(10);
      primitiveInt =
          (boxedInt = Integer.m_valueOf__int(primitiveInt)).m_intValue__();
      $Asserts.$assert(primitiveInt == 5);
    }
    {
      let /** Integer */ $value;
      primitiveInt = 5;
      boxedInt = Integer.$create__int(10);
      primitiveInt =
          ($value = boxedInt,
           boxedInt = Integer.m_valueOf__int(boxedInt.m_intValue__() + 1 | 0),
           $value)
              .m_intValue__();
      $Asserts.$assert(primitiveInt == 10);
    }
    {
      primitiveInt = 5;
      boxedInt = Integer.$create__int(10);
      primitiveInt =
          (boxedInt = Integer.m_valueOf__int(boxedInt.m_intValue__() + 1 | 0))
              .m_intValue__();
      $Asserts.$assert(primitiveInt == 11);
    }
  }

  static m_nonExamples__() {
    let /** number */ primitiveInt;
    let /** Integer */ boxedInt;
    let /** ?boolean */ boxedBoolean;
    {
      primitiveInt = 5;
      boxedInt = Integer.$create__int(10);
      primitiveInt = boxedInt.m_intValue__() - primitiveInt | 0;
      $Asserts.$assert(primitiveInt == 5);
    }
    {
      primitiveInt = 5;
      boxedInt = Integer.$create__int(10);
      boxedBoolean = true;
      boxedBoolean = boxedInt.m_intValue__() == primitiveInt;
      $Asserts.$assert(
          Boolean.m_booleanValue__java_lang_Boolean(boxedBoolean) == false);
    }
  }

  static m_parenthesisRemoval__() {
    Integer.$create__int(1 + 2 | 0);
  }

  static $clinit() {
    ImplicitParenthesis.$clinit = () => {};
    ImplicitParenthesis.$loadModules();
    j_l_Object.$clinit();
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance instanceof ImplicitParenthesis;
  }

  static $loadModules() {
    Boolean = goog.module.get('java.lang.Boolean$impl');
    Integer = goog.module.get('java.lang.Integer$impl');
    $Asserts = goog.module.get('vmbootstrap.Asserts$impl');
  }
}
$Util.$setClassMetadata(
    ImplicitParenthesis, 'implicitparenthesis.ImplicitParenthesis');

exports = ImplicitParenthesis;

//# sourceMappingURL=ImplicitParenthesis.js.map
