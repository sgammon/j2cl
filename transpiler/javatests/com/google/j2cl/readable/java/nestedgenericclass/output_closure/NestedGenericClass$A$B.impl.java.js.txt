goog.module('nestedgenericclass.NestedGenericClass.A.B$impl');

const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let A = goog.forwardDeclare('nestedgenericclass.NestedGenericClass.A$impl');

/**
 * @template T, T_1, T_2
 */
class B extends j_l_Object {
  /** @protected */
  constructor() {
    super();
    /**@type {A<T_1, T_2>}*/
    this.$outer_this__nestedgenericclass_NestedGenericClass_A_B;
  }
  // Factory method corresponding to constructor 'B(A)'.
  /** @template T, T_1, T_2 @return {!B<T, T_1, T_2>} */
  static $create__nestedgenericclass_NestedGenericClass_A(
      /** A<T_1, T_2> */ $outer_this) {
    B.$clinit();
    let $instance = new B();
    $instance
        .$ctor__nestedgenericclass_NestedGenericClass_A_B__nestedgenericclass_NestedGenericClass_A(
            $outer_this);
    return $instance;
  }
  // Initialization from constructor 'B(A)'.

  $ctor__nestedgenericclass_NestedGenericClass_A_B__nestedgenericclass_NestedGenericClass_A(
      /** A<T_1, T_2> */ $outer_this) {
    this.$outer_this__nestedgenericclass_NestedGenericClass_A_B = $outer_this;
    this.$ctor__java_lang_Object__();
  }
  // Factory method corresponding to constructor 'B(A, Object)'.
  /** @template T, T_1, T_2, U @return {!B<T, T_1, T_2>} */
  static $create__nestedgenericclass_NestedGenericClass_A__java_lang_Object(
      /** A<T_1, T_2> */ $outer_this, /** U */ u) {
    B.$clinit();
    let $instance = new B();
    $instance
        .$ctor__nestedgenericclass_NestedGenericClass_A_B__nestedgenericclass_NestedGenericClass_A__java_lang_Object(
            $outer_this, u);
    return $instance;
  }
  // Initialization from constructor 'B(A, Object)'.
  /** @template U */
  $ctor__nestedgenericclass_NestedGenericClass_A_B__nestedgenericclass_NestedGenericClass_A__java_lang_Object(
      /** A<T_1, T_2> */ $outer_this, /** U */ u) {
    this.$outer_this__nestedgenericclass_NestedGenericClass_A_B = $outer_this;
    this.$ctor__java_lang_Object__();
  }

  static $clinit() {
    B.$clinit = () => {};
    B.$loadModules();
    j_l_Object.$clinit();
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance instanceof B;
  }

  static $loadModules() {}
}
$Util.$setClassMetadata(B, 'nestedgenericclass.NestedGenericClass$A$B');

exports = B;

//# sourceMappingURL=NestedGenericClass$A$B.js.map
