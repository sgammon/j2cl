goog.module('intersectiontype.IntersectionTypeTest$impl');

const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let Cmp = goog.forwardDeclare('intersectiontype.Cmp$impl');
let Cmp2 = goog.forwardDeclare('intersectiontype.Cmp2$impl');
let Getable = goog.forwardDeclare('intersectiontype.Getable$impl');
let $LambdaAdaptor$1 = goog.forwardDeclare('intersectiontype.IntersectionTypeTest.$LambdaAdaptor$1$impl');
let $LambdaAdaptor$2 = goog.forwardDeclare('intersectiontype.IntersectionTypeTest.$LambdaAdaptor$2$impl');
let A = goog.forwardDeclare('intersectiontype.IntersectionTypeTest.A$impl');
let EmptyA = goog.forwardDeclare('intersectiontype.IntersectionTypeTest.EmptyA$impl');
let EmptyB = goog.forwardDeclare('intersectiontype.IntersectionTypeTest.EmptyB$impl');
let Setable = goog.forwardDeclare('intersectiontype.Setable$impl');
let Comparable = goog.forwardDeclare('java.lang.Comparable$impl');
let $Equality = goog.forwardDeclare('nativebootstrap.Equality$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');

/**
 * @template U
 */
class IntersectionTypeTest extends j_l_Object {
  /** @protected */
  constructor() {
    super();
  }
  /** @template U @return {!IntersectionTypeTest<U>} */
  static $create__() {
    IntersectionTypeTest.$clinit();
    let $instance = new IntersectionTypeTest();
    $instance.$ctor__intersectiontype_IntersectionTypeTest__();
    return $instance;
  }

  $ctor__intersectiontype_IntersectionTypeTest__() {
    this.$ctor__java_lang_Object__();
  }
  /** @template T */
  static m_getAndSet__intersectiontype_Getable(/** T */ object) {
    IntersectionTypeTest.$clinit();
    /**@type {Setable}*/ ($Casts.$to(object, Setable)).m_set__int(1);
    /**@type {Getable}*/ (object).m_get__();
  }
  /** @template T @return {Getable<T>} */
  static m_cast__java_lang_Object(/** * */ o) {
    IntersectionTypeTest.$clinit();
    if ($Equality.$same(o, null)) {
      return /**@type {Getable<T>}*/ (
          $Casts.$to($Casts.$to(o, Getable), Setable));
    }
    return /**@type {Getable<T>}*/ (
        $Casts.$to($Casts.$to(o, Getable), Setable));
  }
  /**
   * @template T @return {Getable<(Comparable<?string>|boolean|number|string)>}
   */
  static m_cast1__java_lang_Object(/** * */ s) {
    IntersectionTypeTest.$clinit();
    return /**@type {Getable<(Comparable<?string>|boolean|number|string)>}*/ (
        $Casts.$to($Casts.$to(s, Getable), Setable));
  }
  /** @template T @return {Getable<(Comparable<T>|boolean|number|string)>} */
  static m_cast2__java_lang_Object(/** * */ s) {
    IntersectionTypeTest.$clinit();
    return /**@type {Getable<(Comparable<T>|boolean|number|string)>}*/ (
        $Casts.$to($Casts.$to(s, Getable), Setable));
  }
  /** @return {*} */
  m_cast3__java_lang_Object(/** * */ s) {
    return s;
  }
  /** @return {Cmp} */
  static m_method__() {
    IntersectionTypeTest.$clinit();
    return /**@type {Cmp}*/ (new $LambdaAdaptor$1(() => {
      return 1;
    }));
  }
  /** @return {Cmp2} */
  static m_method2__() {
    IntersectionTypeTest.$clinit();
    return /**@type {Cmp2}*/ (new $LambdaAdaptor$2((/** number */ a) => {
      return 1;
    }));
  }

  static m_testClosureAssignment__java_lang_Object(/** * */ o) {
    IntersectionTypeTest.$clinit();
    let e = /**@type {A}*/ (
        $Casts.$to($Casts.$to($Casts.$to(o, A), EmptyA), EmptyB));
    let g = /**@type {EmptyA}*/ (
        $Casts.$to($Casts.$to($Casts.$to(o, A), EmptyA), EmptyB));
    let s = /**@type {EmptyB}*/ (
        $Casts.$to($Casts.$to($Casts.$to(o, A), EmptyA), EmptyB));
  }
  /** @template T @return {T} */
  static m_get__java_lang_Object(/** T */ t) {
    return t;
  }
  /** @template T @return {T} */
  static m_m__() {
    return /**@type {T}*/ ($Casts.$to(
        IntersectionTypeTest.m_get__java_lang_Object(j_l_Object.$create__()),
        A));
  }
  /** @template T @return {Getable<T>} */
  static m_n__() {
    return null;
  }
  /** @template T */
  static m_set__intersectiontype_IntersectionTypeTest_A(/** T */ t) {}

  m_testMethodCall__() {
    let o = IntersectionTypeTest.m_m__();
    IntersectionTypeTest.m_set__intersectiontype_IntersectionTypeTest_A(
        /**@type {A}*/ ($Casts.$to($Casts.$to(o, A), EmptyA)));
    IntersectionTypeTest.m_set__intersectiontype_IntersectionTypeTest_A(
        IntersectionTypeTest.m_m__());
    let g = /**@type {Getable<A>}*/ (IntersectionTypeTest.m_n__());
  }

  static $clinit() {
    IntersectionTypeTest.$clinit = () => {};
    IntersectionTypeTest.$loadModules();
    j_l_Object.$clinit();
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance instanceof IntersectionTypeTest;
  }

  static $loadModules() {
    Getable = goog.module.get('intersectiontype.Getable$impl');
    $LambdaAdaptor$1 = goog.module.get(
        'intersectiontype.IntersectionTypeTest.$LambdaAdaptor$1$impl');
    $LambdaAdaptor$2 = goog.module.get(
        'intersectiontype.IntersectionTypeTest.$LambdaAdaptor$2$impl');
    A = goog.module.get('intersectiontype.IntersectionTypeTest.A$impl');
    EmptyA =
        goog.module.get('intersectiontype.IntersectionTypeTest.EmptyA$impl');
    EmptyB =
        goog.module.get('intersectiontype.IntersectionTypeTest.EmptyB$impl');
    Setable = goog.module.get('intersectiontype.Setable$impl');
    $Equality = goog.module.get('nativebootstrap.Equality$impl');
    $Casts = goog.module.get('vmbootstrap.Casts$impl');
  }
}
$Util.$setClassMetadata(
    IntersectionTypeTest, 'intersectiontype.IntersectionTypeTest');

exports = IntersectionTypeTest;

//# sourceMappingURL=IntersectionTypeTest.js.map
