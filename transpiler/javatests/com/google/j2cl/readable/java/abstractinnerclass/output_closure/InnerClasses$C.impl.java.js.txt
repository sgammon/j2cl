goog.module('abstractinnerclass.InnerClasses.C$impl');

const A = goog.require('abstractinnerclass.InnerClasses.A$impl');
const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let InnerClasses = goog.forwardDeclare('abstractinnerclass.InnerClasses$impl');

/**
 * @abstract
 * @implements {A}
 */
class C extends j_l_Object {
  /** @protected */
  constructor() {
    super();
    /**@type {InnerClasses}*/
    this.$outer_this__abstractinnerclass_InnerClasses_C;
  }

  $ctor__abstractinnerclass_InnerClasses_C__abstractinnerclass_InnerClasses(
      /** InnerClasses */ $outer_this) {
    this.$outer_this__abstractinnerclass_InnerClasses_C = $outer_this;
    this.$ctor__java_lang_Object__();
  }

  m_bar___$pp_abstractinnerclass() {
    this.m_foo__();
  }

  static $clinit() {
    C.$clinit = () => {};
    C.$loadModules();
    j_l_Object.$clinit();
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance instanceof C;
  }

  static $loadModules() {}
}
A.$markImplementor(C);
$Util.$setClassMetadata(C, 'abstractinnerclass.InnerClasses$C');

exports = C;

//# sourceMappingURL=InnerClasses$C.js.map
