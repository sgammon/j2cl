goog.module('jsfunction.Main$impl');

const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let Class = goog.forwardDeclare('java.lang.Class$impl');
let Double = goog.forwardDeclare('java.lang.Double$impl');
let Integer = goog.forwardDeclare('java.lang.Integer$impl');
let Number = goog.forwardDeclare('java.lang.Number$impl');
let j_l_String = goog.forwardDeclare('java.lang.String$impl');
let ArrayList = goog.forwardDeclare('java.util.ArrayList$impl');
let List = goog.forwardDeclare('java.util.List$impl');
let ClassWithJsFunctionProperty = goog.forwardDeclare('jsfunction.Main.ClassWithJsFunctionProperty$impl');
let DoubleDoubleJsBiFunction = goog.forwardDeclare('jsfunction.Main.DoubleDoubleJsBiFunction$impl');
let JsFunctionImplementation = goog.forwardDeclare('jsfunction.Main.JsFunctionImplementation$impl');
let TIntegerJsBiFunction = goog.forwardDeclare('jsfunction.Main.TIntegerJsBiFunction$impl');
let $Equality = goog.forwardDeclare('nativebootstrap.Equality$impl');
let $Arrays = goog.forwardDeclare('vmbootstrap.Arrays$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');
let $JavaScriptFunction = goog.forwardDeclare('vmbootstrap.JavaScriptFunction$impl');
let $Primitives = goog.forwardDeclare('vmbootstrap.Primitives$impl');
let $int = goog.forwardDeclare('vmbootstrap.primitives.$int$impl');

class Main extends j_l_Object {
  /** @protected */
  constructor() {
    super();
    /**@type {?function(?):void}*/
    this.f_jsFunctionFieldWildcard__jsfunction_Main;
    /**@type {?function(?string):void}*/
    this.f_jsFunctionFieldParameterized__jsfunction_Main;
  }
  /** @return {!Main} */
  static $create__() {
    Main.$clinit();
    let $instance = new Main();
    $instance.$ctor__jsfunction_Main__();
    return $instance;
  }

  $ctor__jsfunction_Main__() {
    this.$ctor__java_lang_Object__();
    this.$init___$p_jsfunction_Main();
  }
  // /** @return {?function(number):number} */
  // native static createNativeFunction()
  /** @return {number} */
  static m_callFn__jsfunction_Main_JsFunctionInterface__int(
      /** ?function(number):number */ fn, /** number */ a) {
    Main.$clinit();
    return fn(a);
  }

  m_testJsFunction__() {
    let func = JsFunctionImplementation.$create__();
    func(10);
    Main.m_callFn__jsfunction_Main_JsFunctionInterface__int(
        Main.createNativeFunction(), 10);
    let a = func.f_field__jsfunction_Main_JsFunctionImplementation;
    JsFunctionImplementation.m_bar__jsfunction_Main_JsFunctionImplementation(
        func);
  }

  m_testJsFunctionsCapturingLocal__() {
    let n = 4;
    Main.m_callFn__jsfunction_Main_JsFunctionInterface__int(
        (/** number */ number_1) => {
          return number_1 + n | 0;
        },
        n);
    Main.m_callFn__jsfunction_Main_JsFunctionInterface__int(
        (/** number */ a) => {
          return a + n | 0;
        },
        n);
    ((/** number */ a_1) => {
      this.m_instanceMethod___$p_jsfunction_Main();
      return 0;
    })(3);
  }

  m_testJsFunctionThis__() {
    ((/** number */ a) => {
      this.m_instanceMethod___$p_jsfunction_Main();
      return 0;
    })(3);
  }

  m_instanceMethod___$p_jsfunction_Main() {}

  m_testJsFunctionErasureCasts__() {
    let list = /**@type {!ArrayList<?function(?string):?string>}*/ (
        ArrayList.$create__());
    Main.m_acceptsJsFunction__jsfunction_Main_Function(
        /**@type {?function(?string):?string}*/ (
            $Casts.$to(list.getAtIndex(0), $JavaScriptFunction)));
  }

  static m_acceptsJsFunction__jsfunction_Main_Function(
      /** ?function(?string):?string */ f) {
    Main.$clinit();
  }
  /** @return {?function(number, ...number):number} */
  m_testJsFunctionVarargs___$pp_jsfunction() {
    let f = (/** number */ i, .../** ...number */ numbers) => {
      $Arrays.$stampType(numbers, $int, 1);
      let sum = i;
      for (let $array = numbers, $index = 0; $index < $array.length; $index++) {
        let number_1 = $array[$index];
        sum = sum + number_1 | 0;
      }
      return sum;
    };
    return f;
  }
  /** @return {?function(number, ...number):number} */
  m_testJsFunctionVarargsInnerClass___$pp_jsfunction() {
    return (/** number */ i, .../** ...number */ numbers) => {
      $Arrays.$stampType(numbers, $int, 1);
      let sum = i;
      for (let $array = numbers, $index = 0; $index < $array.length; $index++) {
        let number_1 = $array[$index];
        sum = sum + number_1 | 0;
      }
      return sum;
    };
  }

  m_testVarArgsMethodReferenceToJsFuncion__() {
    let c = (arg0, /** number */ arg1, arg2) => {
      let arg0_1 = /**@type {?function(...*):*}*/ (
          $Casts.$to(arg0, $JavaScriptFunction));
      let arg2_1 = /**@type {Array<?function(...*):*>}*/ (
          $Arrays.$castTo(arg2, $JavaScriptFunction, 1));
      return arg0_1(Integer.m_valueOf__int(arg1), arg2_1);
    };
  }
  /** @template T */
  m_acceptsVarargsJsFunctionWithTypeVariable__jsfunction_Main_JsFunctionVarargsGenerics_$pp_jsfunction(
      /** ?function(number, ...T):number */ x) {}
  /** @template T */
  m_acceptsVarargsJsFunctionWithParemetrizedType__jsfunction_Main_JsFunctionVarargsGenerics_$pp_jsfunction(
      /** ?function(number, ...List<T>):number */ x) {}
  /** @template T */
  acceptsVarargsJsFunctionWithTypeVariableInVarargs(
      .../** ...?function(number, ...T):number */ x) {
    $Arrays.$stampType(x, $JavaScriptFunction, 1);
  }
  /** @template T */
  acceptsVarargsJsFunctionWithParemetrizedTypeInVarargs(
      .../** ...?function(number, ...List<T>):number */ x) {
    $Arrays.$stampType(x, $JavaScriptFunction, 1);
  }

  acceptsJsFunctionInVarargs(.../** ...?function():void */ x) {
    $Arrays.$stampType(x, $JavaScriptFunction, 1);
  }

  m_testJsFunctionClassLiterals___$pp_jsfunction() {
    let array = /**@type {!Array<?function():void>}*/ (
        $Arrays.$init([], $JavaScriptFunction));
    let o = Class.$get($JavaScriptFunction);
    o = Class.$get($JavaScriptFunction, 1);
  }

  m_testJsFunctionOptional___$pp_jsfunction() {
    let f = (/** number */ i, /** ?number= */ n) => {
      return $Primitives.$narrowDoubleToInt(
          i + Double.m_doubleValue__java_lang_Double(n));
    };
  }

  static set parametricJsFunction(/** ?function(*):void */ fn) {
    Main.$clinit();
  }
  /** @return {?function(*):void} */
  static get parametricJsFunction() {
    Main.$clinit();
    return null;
  }

  m_testFunctionExpressionTypeReplacement___$pp_jsfunction() {
    let f = (unused) => {
      let unused_1 = /**@type {?string}*/ ($Casts.$to(unused, j_l_String));
      let l = /**@type {!ArrayList<List<?>>}*/ (ArrayList.$create__());
      l.add(/**@type {!ArrayList<?string>}*/ (ArrayList.$create__()));
    };
  }

  m_testJsFunctionPropertyCall___$pp_jsfunction() {
    let c = ClassWithJsFunctionProperty.$create__();
    {
      let $function = c.f_function__jsfunction_Main_ClassWithJsFunctionProperty;
      $function('');
    }
    {
      let $function_1 = c.function;
      $function_1('');
    }
    {
      let $function_2 =
          c.f_function__jsfunction_Main_ClassWithJsFunctionProperty;
      $function_2('');
    }
    {
      let $function_3 = !$Equality.$same(c, null) ?
          c.f_function__jsfunction_Main_ClassWithJsFunctionProperty :
          null;
      $function_3('');
    }
  }
  /** @return {*} */
  static m_callInterfaceRaw__jsfunction_Main_JsBiFunction__java_lang_Object__java_lang_Number(
      /** ?function(*, (Number|number)):* */ f, /** * */ o,
      /** (Number|number) */ n) {
    Main.$clinit();
    return f(o, n);
  }
  /** @return {?string} */
  static m_callInterfaceParameterized__jsfunction_Main_JsBiFunction__java_lang_String(
      /** ?function(?string, Integer):?string */ f, /** ?string */ s) {
    Main.$clinit();
    return /**@type {?string}*/ (
        $Casts.$to(f(s, Integer.m_valueOf__int(1)), j_l_String));
  }
  /** @template U, V @return {U} */
  static m_callInterfaceUnparameterized__jsfunction_Main_JsBiFunction__java_lang_Object__java_lang_Number(
      /** ?function(U, V):U */ f, /** U */ u, /** V */ v) {
    Main.$clinit();
    return f(u, v);
  }
  /** @return {*} */
  static m_callImplementorRaw__jsfunction_Main_TIntegerJsBiFunction__java_lang_Object__java_lang_Integer(
      /** ?function(*, Integer):* */ f, /** * */ o, /** Integer */ n) {
    Main.$clinit();
    return f(o, n);
  }
  /** @return {?string} */
  static m_callImplementorParameterized__jsfunction_Main_TIntegerJsBiFunction__java_lang_String(
      /** ?function(?string, Integer):?string */ f, /** ?string */ s) {
    Main.$clinit();
    return /**@type {?string}*/ (
        $Casts.$to(f(s, Integer.m_valueOf__int(1)), j_l_String));
  }

  static m_testParameterTypes__() {
    Main.$clinit();
    let tIntegerJsBiFunction = /**@type {function(?string, Integer):?string}*/ (
        TIntegerJsBiFunction.$create__());
    let doubleDoubleJsBiFunction = DoubleDoubleJsBiFunction.$create__();
    Main.m_callInterfaceRaw__jsfunction_Main_JsBiFunction__java_lang_Object__java_lang_Number(
        tIntegerJsBiFunction, 'a', Integer.m_valueOf__int(1));
    Main.m_callInterfaceRaw__jsfunction_Main_JsBiFunction__java_lang_Object__java_lang_Number(
        doubleDoubleJsBiFunction, 1.1, 1.1);
    Main.m_callInterfaceParameterized__jsfunction_Main_JsBiFunction__java_lang_String(
        tIntegerJsBiFunction, 'a');
    Main.m_callInterfaceUnparameterized__jsfunction_Main_JsBiFunction__java_lang_Object__java_lang_Number(
        tIntegerJsBiFunction, 'a', Integer.m_valueOf__int(1));
    Main.m_callInterfaceUnparameterized__jsfunction_Main_JsBiFunction__java_lang_Object__java_lang_Number(
        doubleDoubleJsBiFunction, 1.1, 1.1);
    Main.m_callImplementorRaw__jsfunction_Main_TIntegerJsBiFunction__java_lang_Object__java_lang_Integer(
        /**@type {function(?number, Integer):?number}*/ (
            TIntegerJsBiFunction.$create__()),
        1.1, Integer.m_valueOf__int(1));
    Main.m_callImplementorParameterized__jsfunction_Main_TIntegerJsBiFunction__java_lang_String(
        /**@type {function(?string, Integer):?string}*/ (
            TIntegerJsBiFunction.$create__()),
        '');
    tIntegerJsBiFunction('a', Integer.m_valueOf__int(1));
    doubleDoubleJsBiFunction(1.1, 1.1);
    Main.callOnFunction(DoubleDoubleJsBiFunction.$create__());
  }
  // /** @return {number} */
  // native static callOnFunction(/** ?function(?number, ?number):?number */ f)

  static m_testCast__() {
    Main.$clinit();
    let o = /**@type {function(?string, Integer):?string}*/ (
        TIntegerJsBiFunction.$create__());
    let rawTIntegerJsBiFunction = /**@type {?function(*, Integer):*}*/ (
        $Casts.$to(o, TIntegerJsBiFunction));
    let parameterizedTIntegerJsBiFunction =
        /**@type {?function(?string, Integer):?string}*/ (
            $Casts.$to(o, TIntegerJsBiFunction));
    let anotherRawJsBiFunction = /**@type {?function(*, (Number|number)):*}*/ (
        $Casts.$to(o, $JavaScriptFunction));
    let anotherParameterizedJsBiFunction =
        /**@type {?function(?string, Integer):?string}*/ (
            $Casts.$to(o, $JavaScriptFunction));
    let doubleDoubleJsBiFunction =
        /**@type {?function(?number, ?number):?number}*/ (
            $Casts.$to(o, DoubleDoubleJsBiFunction));
  }

  static m_testNewInstance__() {
    Main.$clinit();
    let rawTIntegerJsBiFunction =
        /**@type {function(*, Integer):*}*/ (TIntegerJsBiFunction.$create__());
    let parameterizedTIntegerJsBiFunction =
        /**@type {?function(*, Integer):*}*/ (TIntegerJsBiFunction.$create__());
    let rawJsBiFunction = DoubleDoubleJsBiFunction.$create__();
  }

  static m_acceptsParameterizedMethod__jsfunction_Main_ParameterizedMethod(
      /** ?function(?):? */ m) {}
  /** @private */
  $init___$p_jsfunction_Main() {
    this.f_jsFunctionFieldWildcard__jsfunction_Main = (/** ? */ event) => {};
    this.f_jsFunctionFieldParameterized__jsfunction_Main = (event_1) => {
      let event_2 = /**@type {?string}*/ ($Casts.$to(event_1, j_l_String));
    };
  }

  static $clinit() {
    Main.$clinit = () => {};
    Main.$loadModules();
    j_l_Object.$clinit();
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance instanceof Main;
  }

  static $loadModules() {
    Class = goog.module.get('java.lang.Class$impl');
    Double = goog.module.get('java.lang.Double$impl');
    Integer = goog.module.get('java.lang.Integer$impl');
    j_l_String = goog.module.get('java.lang.String$impl');
    ArrayList = goog.module.get('java.util.ArrayList$impl');
    ClassWithJsFunctionProperty =
        goog.module.get('jsfunction.Main.ClassWithJsFunctionProperty$impl');
    DoubleDoubleJsBiFunction =
        goog.module.get('jsfunction.Main.DoubleDoubleJsBiFunction$impl');
    JsFunctionImplementation =
        goog.module.get('jsfunction.Main.JsFunctionImplementation$impl');
    TIntegerJsBiFunction =
        goog.module.get('jsfunction.Main.TIntegerJsBiFunction$impl');
    $Equality = goog.module.get('nativebootstrap.Equality$impl');
    $Arrays = goog.module.get('vmbootstrap.Arrays$impl');
    $Casts = goog.module.get('vmbootstrap.Casts$impl');
    $JavaScriptFunction =
        goog.module.get('vmbootstrap.JavaScriptFunction$impl');
    $Primitives = goog.module.get('vmbootstrap.Primitives$impl');
    $int = goog.module.get('vmbootstrap.primitives.$int$impl');
  }
}
$Util.$setClassMetadata(Main, 'jsfunction.Main');

/* NATIVE.JS EPILOG */

const jsfunction_Main = Main;

// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @return {function(number):number}
 * @public
 */
Main.createNativeFunction = function() {
  return function(a) {
    return a;
  };
};

/**
 * @param {function(?number, ?number):?number} fn
 * @return {?number}
 * @public
 */
Main.callOnFunction = function(fn) {
  return fn(1.1, 1.1);
};


exports = Main;

//# sourceMappingURL=Main.js.map
