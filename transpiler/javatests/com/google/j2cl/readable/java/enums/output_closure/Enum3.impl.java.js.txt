goog.module('enums.Enum3$impl');

const Enum = goog.require('java.lang.Enum$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let Integer = goog.forwardDeclare('java.lang.Integer$impl');
let j_u_function_Function = goog.forwardDeclare('java.util.function.Function$impl');
let $Equality = goog.forwardDeclare('nativebootstrap.Equality$impl');
let $Arrays = goog.forwardDeclare('vmbootstrap.Arrays$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');
let $Enums = goog.forwardDeclare('vmbootstrap.Enums$impl');

/**
 * @extends {Enum<Enum3>}
 */
class Enum3 extends Enum {
  /** @protected */
  constructor() {
    super();
  }
  /** @return {!Enum3} */
  static $create__java_lang_String__int__java_util_function_Function(
      /** ?string */ $name, /** number */ $ordinal,
      /** j_u_function_Function<Integer, Integer> */ function_1) {
    let $instance = new Enum3();
    $instance
        .$ctor__enums_Enum3__java_lang_String__int__java_util_function_Function(
            $name, $ordinal, function_1);
    return $instance;
  }

  $ctor__enums_Enum3__java_lang_String__int__java_util_function_Function(
      /** ?string */ $name, /** number */ $ordinal,
      /** j_u_function_Function<Integer, Integer> */ function_1) {
    this.f_name__java_lang_Enum_ = $name;
    this.f_ordinal__java_lang_Enum_ = $ordinal;
    this.$ctor__java_lang_Enum__java_lang_String__int($name, $ordinal);
  }
  /** @return {!Enum3} */
  static m_valueOf__java_lang_String(/** string */ name) {
    Enum3.$clinit();
    if ($Equality.$same(Enum3.f_namesToValuesMap__enums_Enum3_, null)) {
      Enum3.f_namesToValuesMap__enums_Enum3_ =
          $Enums.createMapFromValues(Enum3.m_values__());
    }
    return $Enums.getValueFromNameAndMap(
        name, Enum3.f_namesToValuesMap__enums_Enum3_);
  }
  /** @return {!Array<!Enum3>} */
  static m_values__() {
    Enum3.$clinit();
    return /**@type {!Array<Enum3>}*/ (
        $Arrays.$init([Enum3.$static_VALUE1__enums_Enum3], Enum3));
  }
  /** @return {!Enum3} */
  static get f_VALUE1__enums_Enum3() {
    return (Enum3.$clinit(), Enum3.$static_VALUE1__enums_Enum3);
  }

  static $clinit() {
    Enum3.$clinit = () => {};
    Enum3.$loadModules();
    Enum.$clinit();
    Enum3.$static_VALUE1__enums_Enum3 =
        Enum3.$create__java_lang_String__int__java_util_function_Function(
            $Util.$makeEnumName('VALUE1'), Enum3.$ordinal_VALUE1__enums_Enum3,
            j_u_function_Function.$adapt((v) => {
              let v_1 = /**@type {Integer}*/ ($Casts.$to(v, Integer));
              return Integer.m_valueOf__int(1 + v_1.m_intValue__() | 0);
            }));
    Enum3.f_namesToValuesMap__enums_Enum3_ = null;
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance instanceof Enum3;
  }

  static $loadModules() {
    Integer = goog.module.get('java.lang.Integer$impl');
    j_u_function_Function = goog.module.get('java.util.function.Function$impl');
    $Equality = goog.module.get('nativebootstrap.Equality$impl');
    $Arrays = goog.module.get('vmbootstrap.Arrays$impl');
    $Casts = goog.module.get('vmbootstrap.Casts$impl');
    $Enums = goog.module.get('vmbootstrap.Enums$impl');
  }
}
/**@private {!Enum3}*/
Enum3.$static_VALUE1__enums_Enum3;
/**@type {Map<?string, !Enum3>}*/
Enum3.f_namesToValuesMap__enums_Enum3_;
/**@const {number}*/
Enum3.$ordinal_VALUE1__enums_Enum3 = 0;
$Util.$setClassMetadataForEnum(Enum3, 'enums.Enum3');

exports = Enum3;

//# sourceMappingURL=Enum3.js.map
