goog.module('typewildcards.TypeWildCards.IntegerSupplier$impl');

const $Util = goog.require('nativebootstrap.Util$impl');

let Integer = goog.forwardDeclare('java.lang.Integer$impl');
let $LambdaAdaptor = goog.forwardDeclare('typewildcards.TypeWildCards.IntegerSupplier.$LambdaAdaptor$impl');

/**
 * @interface
 */
class IntegerSupplier {
  /** @abstract @return {Integer} */
  m_get__() {}
  /** @return {IntegerSupplier} */
  static $adapt(/** ?function():Integer */ fn) {
    IntegerSupplier.$clinit();
    return new $LambdaAdaptor(fn);
  }

  static $clinit() {
    IntegerSupplier.$clinit = () => {};
    IntegerSupplier.$loadModules();
  }

  static $markImplementor(/** Function */ ctor) {
    ctor.prototype.$implements__typewildcards_TypeWildCards_IntegerSupplier =
        true;
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance != null &&
        !!instance.$implements__typewildcards_TypeWildCards_IntegerSupplier;
  }

  static $loadModules() {
    $LambdaAdaptor = goog.module.get(
        'typewildcards.TypeWildCards.IntegerSupplier.$LambdaAdaptor$impl');
  }
}
IntegerSupplier.$markImplementor(/**@type {Function}*/ (IntegerSupplier));
$Util.$setClassMetadataForInterface(
    IntegerSupplier, 'typewildcards.TypeWildCards$IntegerSupplier');

exports = IntegerSupplier;

//# sourceMappingURL=TypeWildCards$IntegerSupplier.js.map
