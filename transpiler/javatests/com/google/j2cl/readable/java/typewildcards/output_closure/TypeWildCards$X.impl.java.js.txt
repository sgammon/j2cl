goog.module('typewildcards.TypeWildCards.X$impl');

const $Util = goog.require('nativebootstrap.Util$impl');

let $LambdaAdaptor = goog.forwardDeclare('typewildcards.TypeWildCards.X.$LambdaAdaptor$impl');

/**
 * @interface
 */
class X {
  /** @abstract */
  m_m__() {}
  /** @return {X} */
  static $adapt(/** ?function():void */ fn) {
    X.$clinit();
    return new $LambdaAdaptor(fn);
  }

  static $clinit() {
    X.$clinit = () => {};
    X.$loadModules();
  }

  static $markImplementor(/** Function */ ctor) {
    ctor.prototype.$implements__typewildcards_TypeWildCards_X = true;
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance != null &&
        !!instance.$implements__typewildcards_TypeWildCards_X;
  }

  static $loadModules() {
    $LambdaAdaptor =
        goog.module.get('typewildcards.TypeWildCards.X.$LambdaAdaptor$impl');
  }
}
X.$markImplementor(/**@type {Function}*/ (X));
$Util.$setClassMetadataForInterface(X, 'typewildcards.TypeWildCards$X');

exports = X;

//# sourceMappingURL=TypeWildCards$X.js.map
