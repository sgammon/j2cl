goog.module('boundedtypesupercall.Main.Bar$impl');

const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let $1 = goog.forwardDeclare('boundedtypesupercall.Main.Bar.$1$impl');
let Foo = goog.forwardDeclare('boundedtypesupercall.Main.Foo$impl');
let Comparable = goog.forwardDeclare('java.lang.Comparable$impl');

/**
 * @template T
 */
class Bar extends j_l_Object {
  /** @protected */
  constructor() {
    super();
  }
  /** @template T @return {!Bar<T>} */
  static $create__() {
    Bar.$clinit();
    let $instance = new Bar();
    $instance.$ctor__boundedtypesupercall_Main_Bar__();
    return $instance;
  }

  $ctor__boundedtypesupercall_Main_Bar__() {
    this.$ctor__java_lang_Object__();
  }
  /** @return {T} */
  m_getSomething__() {
    return null;
  }
  /** @return {Foo<T>} */
  m_doSomething__() {
    return /**@type {!$1<T>}*/ (
        $1.$create__boundedtypesupercall_Main_Bar__java_lang_Comparable(
            this, this.m_getSomething__()));
  }

  static $clinit() {
    Bar.$clinit = () => {};
    Bar.$loadModules();
    j_l_Object.$clinit();
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance instanceof Bar;
  }

  static $loadModules() {
    $1 = goog.module.get('boundedtypesupercall.Main.Bar.$1$impl');
  }
}
$Util.$setClassMetadata(Bar, 'boundedtypesupercall.Main$Bar');

exports = Bar;

//# sourceMappingURL=Main$Bar.js.map
