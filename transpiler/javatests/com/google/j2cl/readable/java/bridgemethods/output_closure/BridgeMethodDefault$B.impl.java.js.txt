goog.module('bridgemethods.BridgeMethodDefault.B$impl');

const JJ = goog.require('bridgemethods.BridgeMethodDefault.JJ$impl');
const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

/**
 * @implements {JJ}
 */
class B extends j_l_Object {
  /** @protected */
  constructor() {
    super();
  }
  /** @return {!B} */
  static $create__() {
    B.$clinit();
    let $instance = new B();
    $instance.$ctor__bridgemethods_BridgeMethodDefault_B__();
    return $instance;
  }

  $ctor__bridgemethods_BridgeMethodDefault_B__() {
    this.$ctor__java_lang_Object__();
  }
  // Default method forwarding stub.
  /** @override */
  m_m__java_lang_Object(/** * */ arg0) {
    JJ.m_m__$default__bridgemethods_BridgeMethodDefault_JJ__java_lang_Object(
        this, arg0);
  }
  // Bridge method.
  /** @override */
  m(/** * */ arg0) {
    this.m_m__java_lang_Object(arg0);
  }

  static $clinit() {
    B.$clinit = () => {};
    B.$loadModules();
    j_l_Object.$clinit();
    JJ.$clinit();
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance instanceof B;
  }

  static $loadModules() {}
}
JJ.$markImplementor(B);
$Util.$setClassMetadata(B, 'bridgemethods.BridgeMethodDefault$B');

exports = B;

//# sourceMappingURL=BridgeMethodDefault$B.js.map
