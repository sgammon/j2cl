goog.module('bridgemethods.TestCase102.B$impl');

const BI1 = goog.require('bridgemethods.TestCase102.BI1$impl');
const BI2 = goog.require('bridgemethods.TestCase102.BI2$impl');
const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

/**
 * @abstract
 * @template B1
 * @implements {BI1}
 * @implements {BI2}
 */
class B extends j_l_Object {
  /** @protected */
  constructor() {
    super();
  }

  $ctor__bridgemethods_TestCase102_B__() {
    this.$ctor__java_lang_Object__();
  }
  /** @abstract */
  m_set__java_lang_Object(/** B1 */ value) {}
  // Bridge method.
  /** @override */
  set(/** ?string */ arg0) {
    this.m_set__java_lang_String(arg0);
  }

  static $clinit() {
    B.$clinit = () => {};
    B.$loadModules();
    j_l_Object.$clinit();
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance instanceof B;
  }

  static $loadModules() {}
}
BI1.$markImplementor(B);
BI2.$markImplementor(B);
$Util.$setClassMetadata(B, 'bridgemethods.TestCase102$B');

exports = B;

//# sourceMappingURL=TestCase102$B.js.map
