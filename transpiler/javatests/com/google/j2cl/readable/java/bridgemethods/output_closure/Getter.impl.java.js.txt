goog.module('bridgemethods.Getter$impl');

const $Util = goog.require('nativebootstrap.Util$impl');

let $LambdaAdaptor = goog.forwardDeclare('bridgemethods.Getter.$LambdaAdaptor$impl');

/**
 * @interface
 */
class Getter {
  /** @abstract @return {?string} */
  m_get__java_lang_String(/** ?string */ s) {}
  /** @return {Getter} */
  static $adapt(/** ?function(?string):?string */ fn) {
    Getter.$clinit();
    return new $LambdaAdaptor(fn);
  }

  static $clinit() {
    Getter.$clinit = () => {};
    Getter.$loadModules();
  }

  static $markImplementor(/** Function */ ctor) {
    ctor.prototype.$implements__bridgemethods_Getter = true;
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance != null && !!instance.$implements__bridgemethods_Getter;
  }

  static $loadModules() {
    $LambdaAdaptor =
        goog.module.get('bridgemethods.Getter.$LambdaAdaptor$impl');
  }
}
Getter.$markImplementor(/**@type {Function}*/ (Getter));
$Util.$setClassMetadataForInterface(Getter, 'bridgemethods.Getter');

exports = Getter;

//# sourceMappingURL=Getter.js.map
