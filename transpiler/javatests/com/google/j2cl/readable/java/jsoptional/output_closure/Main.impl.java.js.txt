goog.module('jsoptional.Main$impl');

const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let Boolean = goog.forwardDeclare('java.lang.Boolean$impl');
let Integer = goog.forwardDeclare('java.lang.Integer$impl');
let $Arrays = goog.forwardDeclare('vmbootstrap.Arrays$impl');

class Main extends j_l_Object {
  constructor(/** ?string= */ a) {
    Main.$clinit();
    super();
    /**@type {?function(?string=, ...*):*}*/
    this.f_f__jsoptional_Main;
    this.$ctor__jsoptional_Main__java_lang_String(a);
  }

  method1(/** number */ i1, /** ?number= */ d, /** Integer= */ i) {}

  method2(/** ?string */ s1, /** ?number= */ d, .../** ...?boolean */ i) {
    $Arrays.$stampType(i, Boolean, 1);
  }

  $ctor__jsoptional_Main__java_lang_String(/** ?string */ a) {
    this.$ctor__java_lang_Object__();
    this.$init___$p_jsoptional_Main();
  }

  m_testFunction__jsoptional_Main_Function(
      /** ?function(?string=, ...*):* */ f) {}

  testOptionalFunction(/** ?function(?string=, ...*):*= */ f) {}
  /** @private */
  $init___$p_jsoptional_Main() {
    this.f_f__jsoptional_Main = (/** ?string= */ s, .../** ...* */ varargs) => {
      return s;
    };
  }

  static $clinit() {
    Main.$clinit = () => {};
    Main.$loadModules();
    j_l_Object.$clinit();
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance instanceof Main;
  }

  static $loadModules() {
    Boolean = goog.module.get('java.lang.Boolean$impl');
    $Arrays = goog.module.get('vmbootstrap.Arrays$impl');
  }
}
$Util.$setClassMetadata(Main, 'jsoptional.Main');

exports = Main;

//# sourceMappingURL=Main.js.map
