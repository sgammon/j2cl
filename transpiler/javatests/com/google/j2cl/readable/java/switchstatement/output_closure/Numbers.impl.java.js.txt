goog.module('switchstatement.Numbers$impl');

const Enum = goog.require('java.lang.Enum$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let $Equality = goog.forwardDeclare('nativebootstrap.Equality$impl');
let $Arrays = goog.forwardDeclare('vmbootstrap.Arrays$impl');
let $Enums = goog.forwardDeclare('vmbootstrap.Enums$impl');

/**
 * @extends {Enum<Numbers>}
 */
class Numbers extends Enum {
  /** @protected */
  constructor() {
    super();
  }
  /** @return {!Numbers} */
  static $create__java_lang_String__int(
      /** ?string */ $name, /** number */ $ordinal) {
    let $instance = new Numbers();
    $instance.$ctor__switchstatement_Numbers__java_lang_String__int(
        $name, $ordinal);
    return $instance;
  }

  $ctor__switchstatement_Numbers__java_lang_String__int(
      /** ?string */ $name, /** number */ $ordinal) {
    this.f_name__java_lang_Enum_ = $name;
    this.f_ordinal__java_lang_Enum_ = $ordinal;
    this.$ctor__java_lang_Enum__java_lang_String__int($name, $ordinal);
  }
  /** @return {!Numbers} */
  static m_valueOf__java_lang_String(/** string */ name) {
    Numbers.$clinit();
    if ($Equality.$same(
            Numbers.f_namesToValuesMap__switchstatement_Numbers_, null)) {
      Numbers.f_namesToValuesMap__switchstatement_Numbers_ =
          $Enums.createMapFromValues(Numbers.m_values__());
    }
    return $Enums.getValueFromNameAndMap(
        name, Numbers.f_namesToValuesMap__switchstatement_Numbers_);
  }
  /** @return {!Array<!Numbers>} */
  static m_values__() {
    Numbers.$clinit();
    return /**@type {!Array<Numbers>}*/ ($Arrays.$init(
        [
          Numbers.$static_ONE__switchstatement_Numbers,
          Numbers.$static_TWO__switchstatement_Numbers
        ],
        Numbers));
  }
  /** @return {!Numbers} */
  static get f_ONE__switchstatement_Numbers() {
    return (Numbers.$clinit(), Numbers.$static_ONE__switchstatement_Numbers);
  }
  /** @return {!Numbers} */
  static get f_TWO__switchstatement_Numbers() {
    return (Numbers.$clinit(), Numbers.$static_TWO__switchstatement_Numbers);
  }

  static $clinit() {
    Numbers.$clinit = () => {};
    Numbers.$loadModules();
    Enum.$clinit();
    Numbers.$static_ONE__switchstatement_Numbers =
        Numbers.$create__java_lang_String__int(
            $Util.$makeEnumName('ONE'),
            Numbers.$ordinal_ONE__switchstatement_Numbers);
    Numbers.$static_TWO__switchstatement_Numbers =
        Numbers.$create__java_lang_String__int(
            $Util.$makeEnumName('TWO'),
            Numbers.$ordinal_TWO__switchstatement_Numbers);
    Numbers.f_namesToValuesMap__switchstatement_Numbers_ = null;
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance instanceof Numbers;
  }

  static $loadModules() {
    $Equality = goog.module.get('nativebootstrap.Equality$impl');
    $Arrays = goog.module.get('vmbootstrap.Arrays$impl');
    $Enums = goog.module.get('vmbootstrap.Enums$impl');
  }
}
/**@private {!Numbers}*/
Numbers.$static_ONE__switchstatement_Numbers;
/**@private {!Numbers}*/
Numbers.$static_TWO__switchstatement_Numbers;
/**@type {Map<?string, !Numbers>}*/
Numbers.f_namesToValuesMap__switchstatement_Numbers_;
/**@const {number}*/
Numbers.$ordinal_ONE__switchstatement_Numbers = 0;
/**@const {number}*/
Numbers.$ordinal_TWO__switchstatement_Numbers = 1;
$Util.$setClassMetadataForEnum(Numbers, 'switchstatement.Numbers');

exports = Numbers;

//# sourceMappingURL=Numbers.js.map
