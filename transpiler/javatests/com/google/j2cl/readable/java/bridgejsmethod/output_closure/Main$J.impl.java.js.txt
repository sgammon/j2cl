goog.module('bridgejsmethod.Main.J$impl');

const $Util = goog.require('nativebootstrap.Util$impl');

let $LambdaAdaptor = goog.forwardDeclare('bridgejsmethod.Main.J.$LambdaAdaptor$impl');

/**
 * @interface
 * @template T
 */
class J {
  /** @abstract */
  m_bar__java_lang_Object(/** T */ t) {}
  /** @template T @return {J<T>} */
  static $adapt(/** ?function(T):void */ fn) {
    J.$clinit();
    return /**@type {!$LambdaAdaptor<T>}*/ (new $LambdaAdaptor(fn));
  }

  static $clinit() {
    J.$clinit = () => {};
    J.$loadModules();
  }

  static $markImplementor(/** Function */ ctor) {
    ctor.prototype.$implements__bridgejsmethod_Main_J = true;
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance != null && !!instance.$implements__bridgejsmethod_Main_J;
  }

  static $loadModules() {
    $LambdaAdaptor =
        goog.module.get('bridgejsmethod.Main.J.$LambdaAdaptor$impl');
  }
}
J.$markImplementor(/**@type {Function}*/ (J));
$Util.$setClassMetadataForInterface(J, 'bridgejsmethod.Main$J');

exports = J;

//# sourceMappingURL=Main$J.js.map
