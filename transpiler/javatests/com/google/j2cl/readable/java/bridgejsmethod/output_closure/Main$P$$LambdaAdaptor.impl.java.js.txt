goog.module('bridgejsmethod.Main.P.$LambdaAdaptor$impl');

const P = goog.require('bridgejsmethod.Main.P$impl');
const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

/**
 * @implements {P}
 */
class $LambdaAdaptor extends j_l_Object {
  constructor(/** ?function():?string */ fn) {
    $LambdaAdaptor.$clinit();
    super();
    /**@type {?function():?string}*/
    this.f_fn__bridgejsmethod_Main_P_$LambdaAdaptor;
    this.$ctor__bridgejsmethod_Main_P_$LambdaAdaptor__bridgejsmethod_Main_P_$JsFunction(
        fn);
  }

  $ctor__bridgejsmethod_Main_P_$LambdaAdaptor__bridgejsmethod_Main_P_$JsFunction(
      /** ?function():?string */ fn) {
    this.$ctor__java_lang_Object__();
    this.f_fn__bridgejsmethod_Main_P_$LambdaAdaptor = fn;
  }
  /** @override @return {?string} */
  m_getKey__() {
    let /** ?function():?string */ $function;
    return (
        $function = this.f_fn__bridgejsmethod_Main_P_$LambdaAdaptor,
        $function());
  }

  static $clinit() {
    $LambdaAdaptor.$clinit = () => {};
    $LambdaAdaptor.$loadModules();
    j_l_Object.$clinit();
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance instanceof $LambdaAdaptor;
  }

  static $loadModules() {}
}
P.$markImplementor($LambdaAdaptor);
$Util.$setClassMetadata($LambdaAdaptor, 'bridgejsmethod.Main$P$$LambdaAdaptor');

exports = $LambdaAdaptor;

//# sourceMappingURL=Main$P$$LambdaAdaptor.js.map
