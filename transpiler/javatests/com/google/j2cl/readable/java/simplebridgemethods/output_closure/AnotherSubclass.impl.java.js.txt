goog.module('simplebridgemethods.AnotherSubclass$impl');

const $Util = goog.require('nativebootstrap.Util$impl');
const Superclass = goog.require('simplebridgemethods.Superclass$impl');

let AssertionError = goog.forwardDeclare('java.lang.AssertionError$impl');

/**
 * @extends {Superclass<AssertionError>}
 */
class AnotherSubclass extends Superclass {
  /** @protected */
  constructor() {
    super();
  }
  /** @return {!AnotherSubclass} */
  static $create__() {
    AnotherSubclass.$clinit();
    let $instance = new AnotherSubclass();
    $instance.$ctor__simplebridgemethods_AnotherSubclass__();
    return $instance;
  }

  $ctor__simplebridgemethods_AnotherSubclass__() {
    this.$ctor__simplebridgemethods_Superclass__();
  }

  static $clinit() {
    AnotherSubclass.$clinit = () => {};
    AnotherSubclass.$loadModules();
    Superclass.$clinit();
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance instanceof AnotherSubclass;
  }

  static $loadModules() {}
}
$Util.$setClassMetadata(AnotherSubclass, 'simplebridgemethods.AnotherSubclass');

exports = AnotherSubclass;

//# sourceMappingURL=AnotherSubclass.js.map
