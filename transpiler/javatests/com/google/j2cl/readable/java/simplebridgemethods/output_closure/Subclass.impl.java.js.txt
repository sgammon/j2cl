goog.module('simplebridgemethods.Subclass$impl');

const $Util = goog.require('nativebootstrap.Util$impl');
const Superclass = goog.require('simplebridgemethods.Superclass$impl');

let AssertionError = goog.forwardDeclare('java.lang.AssertionError$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');

/**
 * @extends {Superclass<AssertionError>}
 */
class Subclass extends Superclass {
  /** @protected */
  constructor() {
    super();
  }
  /** @return {!Subclass} */
  static $create__() {
    Subclass.$clinit();
    let $instance = new Subclass();
    $instance.$ctor__simplebridgemethods_Subclass__();
    return $instance;
  }

  $ctor__simplebridgemethods_Subclass__() {
    this.$ctor__simplebridgemethods_Superclass__();
  }

  m_m1__java_lang_AssertionError(/** AssertionError */ a) {}
  // Bridge method.
  /** @override */
  m_m1__java_lang_Error(/** AssertionError */ arg0) {
    this.m_m1__java_lang_AssertionError(
        /**@type {AssertionError}*/ ($Casts.$to(arg0, AssertionError)));
  }

  static $clinit() {
    Subclass.$clinit = () => {};
    Subclass.$loadModules();
    Superclass.$clinit();
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance instanceof Subclass;
  }

  static $loadModules() {
    AssertionError = goog.module.get('java.lang.AssertionError$impl');
    $Casts = goog.module.get('vmbootstrap.Casts$impl');
  }
}
$Util.$setClassMetadata(Subclass, 'simplebridgemethods.Subclass');

exports = Subclass;

//# sourceMappingURL=Subclass.js.map
