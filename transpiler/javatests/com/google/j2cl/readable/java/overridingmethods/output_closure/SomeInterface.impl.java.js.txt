goog.module('overridingmethods.SomeInterface$impl');

const $Util = goog.require('nativebootstrap.Util$impl');

let $LambdaAdaptor = goog.forwardDeclare('overridingmethods.SomeInterface.$LambdaAdaptor$impl');

/**
 * @interface
 */
class SomeInterface {
  /** @abstract */
  m_bar__() {}
  /** @return {SomeInterface} */
  static $adapt(/** ?function():void */ fn) {
    SomeInterface.$clinit();
    return new $LambdaAdaptor(fn);
  }

  static $clinit() {
    SomeInterface.$clinit = () => {};
    SomeInterface.$loadModules();
  }

  static $markImplementor(/** Function */ ctor) {
    ctor.prototype.$implements__overridingmethods_SomeInterface = true;
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance != null &&
        !!instance.$implements__overridingmethods_SomeInterface;
  }

  static $loadModules() {
    $LambdaAdaptor =
        goog.module.get('overridingmethods.SomeInterface.$LambdaAdaptor$impl');
  }
}
SomeInterface.$markImplementor(/**@type {Function}*/ (SomeInterface));
$Util.$setClassMetadataForInterface(
    SomeInterface, 'overridingmethods.SomeInterface');

exports = SomeInterface;

//# sourceMappingURL=SomeInterface.js.map
