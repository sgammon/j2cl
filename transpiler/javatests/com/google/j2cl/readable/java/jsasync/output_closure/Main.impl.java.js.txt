goog.module('jsasync.Main$impl');

const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let Integer = goog.forwardDeclare('java.lang.Integer$impl');
let Void = goog.forwardDeclare('java.lang.Void$impl');
let $1 = goog.forwardDeclare('jsasync.Main.$1$impl');
let $3 = goog.forwardDeclare('jsasync.Main.$3$impl');
let AsyncInterface = goog.forwardDeclare('jsasync.Main.AsyncInterface$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');

class Main extends j_l_Object {
  /** @protected */
  constructor() {
    super();
    /**@type {IThenable<Integer>}*/
    this.f_x__jsasync_Main_;
  }
  /** @return {!Main} */
  static $create__() {
    Main.$clinit();
    let $instance = new Main();
    $instance.$ctor__jsasync_Main__();
    return $instance;
  }

  $ctor__jsasync_Main__() {
    this.$ctor__java_lang_Object__();
    this.$init___$p_jsasync_Main();
  }
  /** @return {IThenable<?void>} */
  async m_emptyAsyncMethod___$pp_jsasync() {
    return null;
  }
  /** @return {IThenable<Integer>} */
  async m_asyncMethod___$pp_jsasync() {
    let result = /**@type {Integer}*/ (
                     $Casts.$to(
                         await /**@type {Promise<Integer>}*/ (
                             Promise.resolve(Integer.m_valueOf__int(7))),
                         Integer))
                     .m_intValue__();
    return /**@type {IThenable<Integer>}*/ (
        this.m_parametricAsyncMethod__java_lang_Object_$pp_jsasync(
            Integer.m_valueOf__int(result)));
  }
  /** @template T @return {IThenable<T>} */
  async m_parametricAsyncMethod__java_lang_Object_$pp_jsasync(/** T */ value) {
    return /**@type {Promise<T>}*/ (Promise.resolve(
        await /**@type {Promise<T>}*/ (Promise.resolve(value))));
  }
  /** @return {IThenable<?void>} */
  static async m_staticAsyncMethod__() {
    Main.$clinit();
    return /**@type {Promise<?void>}*/ (
        Promise.resolve(/**@type {?void}*/ ($Casts.$to(
            await /**@type {Promise<?void>}*/ (
                Promise.resolve(/**@type {?void}*/ (null))),
            Void))));
  }

  m_testAsyncLambdas___$pp_jsasync() {
    let i = AsyncInterface.$adapt(async () => {
      return /**@type {Promise<Integer>}*/ (
          Promise.resolve(/**@type {Integer}*/ ($Casts.$to(
              await /**@type {Promise<Integer>}*/ (
                  Promise.resolve(Integer.m_valueOf__int(5))),
              Integer))));
    });
    let o = $1.$create__jsasync_Main(this);
    let j = async () => {
      return /**@type {Promise<Integer>}*/ (
          Promise.resolve(/**@type {Integer}*/ ($Casts.$to(
              await /**@type {Promise<Integer>}*/ (
                  Promise.resolve(Integer.m_valueOf__int(5))),
              Integer))));
    };
    let optimizableJsFunction = () => {
      return /**@type {Promise<Integer>}*/ (
          Promise.resolve(Integer.m_valueOf__int(5)));
    };
    let unoptimizableJsFunction = $3.$create__jsasync_Main(this);
  }
  /** @private */
  $init___$p_jsasync_Main() {
    this.f_x__jsasync_Main_ = /**@type {Promise<Integer>}*/ (
        Promise.resolve(Integer.m_valueOf__int(10)));
  }

  static $clinit() {
    Main.$clinit = () => {};
    Main.$loadModules();
    j_l_Object.$clinit();
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance instanceof Main;
  }

  static $loadModules() {
    Integer = goog.module.get('java.lang.Integer$impl');
    Void = goog.module.get('java.lang.Void$impl');
    $1 = goog.module.get('jsasync.Main.$1$impl');
    $3 = goog.module.get('jsasync.Main.$3$impl');
    AsyncInterface = goog.module.get('jsasync.Main.AsyncInterface$impl');
    $Casts = goog.module.get('vmbootstrap.Casts$impl');
  }
}
$Util.$setClassMetadata(Main, 'jsasync.Main');

exports = Main;

//# sourceMappingURL=Main.js.map
