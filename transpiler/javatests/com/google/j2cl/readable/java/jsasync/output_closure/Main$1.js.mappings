[{
          @JsAsync
          @Override
          public IThenable<Integer> asyncCall() {
            return Promise.resolve(await(x));
          }
        }] => [$1]
[{
          @JsAsync
          @Override
          public IThenable<Integer> asyncCall() {
            return Promise.resolve(await(x));
          }
        }] => [constructor]
[{
          @JsAsync
...          }
        }] => [super();] "jsasync.Main$1.<synthetic: ctor_js>"
[{
          @JsAsync
...          }
        }] => [/**@type {Main}*/
  this.$outer_this__jsasync_Main_1;] "jsasync.Main$1.<synthetic: ctor_js>"
[{
          @JsAsync
          @Override
          public IThenable<Integer> asyncCall() {
            return Promise.resolve(await(x));
          }
        }] => [$create__jsasync_Main]
[{
          @JsAsync
...          }
        }] => [$1.$clinit();] "jsasync.Main$1.<synthetic: ctor_create>"
[{
          @JsAsync
...          }
        }] => [let $instance = new $1();] "jsasync.Main$1.<synthetic: ctor_create>"
[{
          @JsAsync
...          }
        }] => [$instance.$ctor__jsasync_Main_1__jsasync_Main($outer_this);] "jsasync.Main$1.<synthetic: ctor_create>"
[{
          @JsAsync
...          }
        }] => [return $instance;] "jsasync.Main$1.<synthetic: ctor_create>"
[{
          @JsAsync
          @Override
          public IThenable<Integer> asyncCall() {
            return Promise.resolve(await(x));
          }
        }] => [$ctor__jsasync_Main_1__jsasync_Main]
[{
          @JsAsync
...          }
        }] => [this.$outer_this__jsasync_Main_1 = $outer_this;] "jsasync.Main$1.<init>"
[{
          @JsAsync
...          }
        }] => [this.$ctor__java_lang_Object__();] "jsasync.Main$1.<init>"
[asyncCall] => [m_asyncCall__]
[return Promise.resolve(await(x));] => [return /**@type {Promise<Integer>}*/ (Promise.resolve(/**@type {Integer}*/ ($Casts.$to(await this.$outer_this__jsasync_Main_1.f_x__jsasync_Main_, Integer))));] "jsasync.Main$1.asyncCall"
[{
          @JsAsync
          @Override
          public IThenable<Integer> asyncCall() {
            return Promise.resolve(await(x));
          }
        }] => [$clinit]
[{
          @JsAsync
...          }
        }] => [$1.$clinit = () =>{};] "jsasync.Main$1.<clinit>"
[{
          @JsAsync
...          }
        }] => [$1.$loadModules();] "jsasync.Main$1.<clinit>"
[{
          @JsAsync
...          }
        }] => [j_l_Object.$clinit();] "jsasync.Main$1.<clinit>"

