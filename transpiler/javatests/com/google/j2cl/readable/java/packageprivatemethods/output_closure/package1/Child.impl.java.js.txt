goog.module('packageprivatemethods.package1.Child$impl');

const $Util = goog.require('nativebootstrap.Util$impl');
const Parent = goog.require('packageprivatemethods.package1.Parent$impl');

class Child extends Parent {
  /** @protected */
  constructor() {
    super();
  }
  /** @return {!Child} */
  static $create__() {
    Child.$clinit();
    let $instance = new Child();
    $instance.$ctor__packageprivatemethods_package1_Child__();
    return $instance;
  }

  $ctor__packageprivatemethods_package1_Child__() {
    this.$ctor__packageprivatemethods_package1_Parent__();
  }
  /** @return {number} */
  m_foo__int(/** number */ a) {
    return a + 1 | 0;
  }
  /** @return {number} */
  m_fun__int__int(/** number */ a, /** number */ b) {
    return a + b + 1 | 0;
  }
  /** @override @return {number} */
  m_bar__int__int__int(/** number */ a, /** number */ b, /** number */ c) {
    return a + b + c + 2 | 0;
  }
  // Bridge method.
  /** @override @return {number} */
  m_foo__int_$pp_packageprivatemethods_package1(/** number */ arg0) {
    return this.m_foo__int(arg0);
  }
  // Bridge method.
  /** @override @return {number} */
  m_fun__int__int_$pp_packageprivatemethods_package1(
      /** number */ arg0, /** number */ arg1) {
    return this.m_fun__int__int(arg0, arg1);
  }

  static $clinit() {
    Child.$clinit = () => {};
    Child.$loadModules();
    Parent.$clinit();
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance instanceof Child;
  }

  static $loadModules() {}
}
$Util.$setClassMetadata(Child, 'packageprivatemethods.package1.Child');

exports = Child;

//# sourceMappingURL=Child.js.map
