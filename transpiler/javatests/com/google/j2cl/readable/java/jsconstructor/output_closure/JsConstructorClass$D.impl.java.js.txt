goog.module('jsconstructor.JsConstructorClass.D$impl');

const B = goog.require('jsconstructor.JsConstructorClass.B$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

class D extends B {
  // JsConstructor 'D()'.

  constructor() {
    D.$clinit();
    super(9);
    /**@type {number}*/
    this.f_fD__jsconstructor_JsConstructorClass_D = 0;
    this.$ctor__jsconstructor_JsConstructorClass_D__();
  }
  // Initialization from constructor 'D()'.

  $ctor__jsconstructor_JsConstructorClass_D__() {
    this.$init___$p_jsconstructor_JsConstructorClass_D();
    this.f_fD__jsconstructor_JsConstructorClass_D = 10;
  }
  // Factory method corresponding to constructor 'D(int)'.
  /** @return {!D} */
  static $create__int(/** number */ x) {
    D.$clinit();
    let $instance = new D();
    $instance.$ctor__jsconstructor_JsConstructorClass_D__int(x);
    return $instance;
  }
  // Initialization from constructor 'D(int)'.

  $ctor__jsconstructor_JsConstructorClass_D__int(/** number */ x) {
    this.f_fD__jsconstructor_JsConstructorClass_D = x;
  }
  /** @private */
  $init___$p_jsconstructor_JsConstructorClass_D() {
    this.f_fD__jsconstructor_JsConstructorClass_D = 8;
  }

  static $clinit() {
    D.$clinit = () => {};
    D.$loadModules();
    B.$clinit();
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance instanceof D;
  }

  static $loadModules() {}
}
$Util.$setClassMetadata(D, 'jsconstructor.JsConstructorClass$D');

exports = D;

//# sourceMappingURL=JsConstructorClass$D.js.map
