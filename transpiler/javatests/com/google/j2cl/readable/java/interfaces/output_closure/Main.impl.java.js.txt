goog.module('interfaces.Main$impl');

const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let Implementor = goog.forwardDeclare('interfaces.Main.Implementor$impl');
let Interface = goog.forwardDeclare('interfaces.Main.Interface$impl');

class Main extends j_l_Object {
  /** @protected */
  constructor() {
    super();
  }
  /** @return {!Main} */
  static $create__() {
    Main.$clinit();
    let $instance = new Main();
    $instance.$ctor__interfaces_Main__();
    return $instance;
  }

  $ctor__interfaces_Main__() {
    this.$ctor__java_lang_Object__();
  }

  m_testInterfaceMembers___$pp_interfaces() {
    let i = Implementor.$create__interfaces_Main(this);
    i.m_interfaceMethod__();
    i.m_defaultMethod__java_lang_Object(null);
    Interface.m_staticInterfaceMethod__();
    let x = (Implementor.$create__interfaces_Main(this),
             Interface.f_a__interfaces_Main_Interface) +
            Interface.f_b__interfaces_Main_Interface |
        0;
  }

  static $clinit() {
    Main.$clinit = () => {};
    Main.$loadModules();
    j_l_Object.$clinit();
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance instanceof Main;
  }

  static $loadModules() {
    Implementor = goog.module.get('interfaces.Main.Implementor$impl');
    Interface = goog.module.get('interfaces.Main.Interface$impl');
  }
}
$Util.$setClassMetadata(Main, 'interfaces.Main');

exports = Main;

//# sourceMappingURL=Main.js.map
