goog.module('accidentaloverride.AnotherAccidentalOverride$impl');

const Parent = goog.require('accidentaloverride.Parent$impl');
const SuperInterface = goog.require('accidentaloverride.SuperInterface$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let AssertionError = goog.forwardDeclare('java.lang.AssertionError$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');

/**
 * @extends {Parent<AssertionError>}
 * @implements {SuperInterface<AssertionError>}
 */
class AnotherAccidentalOverride extends Parent {
  /** @protected */
  constructor() {
    super();
  }
  /** @return {!AnotherAccidentalOverride} */
  static $create__() {
    AnotherAccidentalOverride.$clinit();
    let $instance = new AnotherAccidentalOverride();
    $instance.$ctor__accidentaloverride_AnotherAccidentalOverride__();
    return $instance;
  }

  $ctor__accidentaloverride_AnotherAccidentalOverride__() {
    this.$ctor__accidentaloverride_Parent__();
  }
  // Bridge method.
  /** @override */
  m_foo__java_lang_Object(/** AssertionError */ arg0) {
    this.m_foo__java_lang_AssertionError(
        /**@type {AssertionError}*/ ($Casts.$to(arg0, AssertionError)));
  }
  // Bridge method.
  /** @override */
  m_foo__java_lang_Error(/** AssertionError */ arg0) {
    this.m_foo__java_lang_AssertionError(
        /**@type {AssertionError}*/ ($Casts.$to(arg0, AssertionError)));
  }
  // Specialized bridge method.

  m_foo__java_lang_AssertionError(/** AssertionError */ arg0) {
    super.m_foo__java_lang_Error(arg0);
  }

  static $clinit() {
    AnotherAccidentalOverride.$clinit = () => {};
    AnotherAccidentalOverride.$loadModules();
    Parent.$clinit();
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance instanceof AnotherAccidentalOverride;
  }

  static $loadModules() {
    AssertionError = goog.module.get('java.lang.AssertionError$impl');
    $Casts = goog.module.get('vmbootstrap.Casts$impl');
  }
}
SuperInterface.$markImplementor(AnotherAccidentalOverride);
$Util.$setClassMetadata(
    AnotherAccidentalOverride, 'accidentaloverride.AnotherAccidentalOverride');

exports = AnotherAccidentalOverride;

//# sourceMappingURL=AnotherAccidentalOverride.js.map
