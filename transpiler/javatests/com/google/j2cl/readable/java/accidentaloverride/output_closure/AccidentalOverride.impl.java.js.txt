goog.module('accidentaloverride.AccidentalOverride$impl');

const Parent = goog.require('accidentaloverride.Parent$impl');
const SuperInterface = goog.require('accidentaloverride.SuperInterface$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let Error = goog.forwardDeclare('java.lang.Error$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');

/**
 * @extends {Parent<Error>}
 * @implements {SuperInterface<Error>}
 */
class AccidentalOverride extends Parent {
  /** @protected */
  constructor() {
    super();
  }
  /** @return {!AccidentalOverride} */
  static $create__() {
    AccidentalOverride.$clinit();
    let $instance = new AccidentalOverride();
    $instance.$ctor__accidentaloverride_AccidentalOverride__();
    return $instance;
  }

  $ctor__accidentaloverride_AccidentalOverride__() {
    this.$ctor__accidentaloverride_Parent__();
  }
  // Bridge method.
  /** @override */
  m_foo__java_lang_Object(/** Error */ arg0) {
    this.m_foo__java_lang_Error(/**@type {Error}*/ ($Casts.$to(arg0, Error)));
  }

  static $clinit() {
    AccidentalOverride.$clinit = () => {};
    AccidentalOverride.$loadModules();
    Parent.$clinit();
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance instanceof AccidentalOverride;
  }

  static $loadModules() {
    Error = goog.module.get('java.lang.Error$impl');
    $Casts = goog.module.get('vmbootstrap.Casts$impl');
  }
}
SuperInterface.$markImplementor(AccidentalOverride);
$Util.$setClassMetadata(
    AccidentalOverride, 'accidentaloverride.AccidentalOverride');

exports = AccidentalOverride;

//# sourceMappingURL=AccidentalOverride.js.map
