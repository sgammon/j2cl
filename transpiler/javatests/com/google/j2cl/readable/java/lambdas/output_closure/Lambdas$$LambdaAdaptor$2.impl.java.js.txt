goog.module('lambdas.Lambdas.$LambdaAdaptor$2$impl');

const j_l_Object = goog.require('java.lang.Object$impl');
const GenericFunctionalInterface = goog.require('lambdas.Lambdas.GenericFunctionalInterface$impl');
const JustADefaultT = goog.require('lambdas.Lambdas.JustADefaultT$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

/**
 * @template T, T_1
 * @implements {GenericFunctionalInterface<T>}
 * @implements {JustADefaultT<T_1>}
 */
class $LambdaAdaptor$2 extends j_l_Object {
  constructor(/** ?function(T):T */ fn) {
    $LambdaAdaptor$2.$clinit();
    super();
    /**@type {?function(T):T}*/
    this.f_fn__lambdas_Lambdas_$LambdaAdaptor$2;
    this.$ctor__lambdas_Lambdas_$LambdaAdaptor$2__lambdas_Lambdas_GenericFunctionalInterface_$JsFunction(
        fn);
  }

  $ctor__lambdas_Lambdas_$LambdaAdaptor$2__lambdas_Lambdas_GenericFunctionalInterface_$JsFunction(
      /** ?function(T):T */ fn) {
    this.$ctor__java_lang_Object__();
    this.f_fn__lambdas_Lambdas_$LambdaAdaptor$2 = fn;
  }
  /** @override @return {T} */
  m_m__java_lang_Object(/** T */ arg0) {
    let /** ?function(T):T */ $function;
    return (
        $function = this.f_fn__lambdas_Lambdas_$LambdaAdaptor$2,
        $function(arg0));
  }
  // Default method forwarding stub.
  /** @override */
  m_method__java_lang_Object(/** T_1 */ arg0) {
    JustADefaultT
        .m_method__$default__lambdas_Lambdas_JustADefaultT__java_lang_Object(
            this, arg0);
  }

  static $clinit() {
    $LambdaAdaptor$2.$clinit = () => {};
    $LambdaAdaptor$2.$loadModules();
    j_l_Object.$clinit();
    JustADefaultT.$clinit();
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance instanceof $LambdaAdaptor$2;
  }

  static $loadModules() {}
}
GenericFunctionalInterface.$markImplementor($LambdaAdaptor$2);
JustADefaultT.$markImplementor($LambdaAdaptor$2);
$Util.$setClassMetadata($LambdaAdaptor$2, 'lambdas.Lambdas$$LambdaAdaptor$2');

exports = $LambdaAdaptor$2;

//# sourceMappingURL=Lambdas$$LambdaAdaptor$2.js.map
