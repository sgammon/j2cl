goog.module('lambdas.Lambdas.$1$impl');

const j_l_Object = goog.require('java.lang.Object$impl');
const Functional = goog.require('lambdas.Lambdas.Functional$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let Lambdas = goog.forwardDeclare('lambdas.Lambdas$impl');

/**
 * @template T
 * @implements {Functional<T>}
 */
class $1 extends j_l_Object {
  /** @protected */
  constructor() {
    super();
    /**@type {Lambdas}*/
    this.$outer_this__lambdas_Lambdas_1;
  }
  /** @template T @return {!$1<T>} */
  static $create__lambdas_Lambdas(/** Lambdas */ $outer_this) {
    $1.$clinit();
    let $instance = new $1();
    $instance.$ctor__lambdas_Lambdas_1__lambdas_Lambdas($outer_this);
    return $instance;
  }

  $ctor__lambdas_Lambdas_1__lambdas_Lambdas(/** Lambdas */ $outer_this) {
    this.$outer_this__lambdas_Lambdas_1 = $outer_this;
    this.$ctor__java_lang_Object__();
  }
  /** @override @return {Functional<T>} */
  m_wrap__lambdas_Lambdas_Functional(/** Functional<T> */ f) {
    return null;
  }

  static $clinit() {
    $1.$clinit = () => {};
    $1.$loadModules();
    j_l_Object.$clinit();
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance instanceof $1;
  }

  static $loadModules() {}
}
Functional.$markImplementor($1);
$Util.$setClassMetadata($1, 'lambdas.Lambdas$1');

exports = $1;

//# sourceMappingURL=Lambdas$1.js.map
