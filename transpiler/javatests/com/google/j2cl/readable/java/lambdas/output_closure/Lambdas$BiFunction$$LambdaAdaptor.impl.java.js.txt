goog.module('lambdas.Lambdas.BiFunction.$LambdaAdaptor$impl');

const j_l_Object = goog.require('java.lang.Object$impl');
const BiFunction = goog.require('lambdas.Lambdas.BiFunction$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let Lambdas_Function = goog.forwardDeclare('lambdas.Lambdas.Function$impl');

/**
 * @template T, U, R
 * @implements {BiFunction<T, U, R>}
 */
class $LambdaAdaptor extends j_l_Object {
  constructor(/** ?function(T, U):R */ fn) {
    $LambdaAdaptor.$clinit();
    super();
    /**@type {?function(T, U):R}*/
    this.f_fn__lambdas_Lambdas_BiFunction_$LambdaAdaptor;
    this.$ctor__lambdas_Lambdas_BiFunction_$LambdaAdaptor__lambdas_Lambdas_BiFunction_$JsFunction(
        fn);
  }

  $ctor__lambdas_Lambdas_BiFunction_$LambdaAdaptor__lambdas_Lambdas_BiFunction_$JsFunction(
      /** ?function(T, U):R */ fn) {
    this.$ctor__java_lang_Object__();
    this.f_fn__lambdas_Lambdas_BiFunction_$LambdaAdaptor = fn;
  }
  /** @override @return {R} */
  m_apply__java_lang_Object__java_lang_Object(/** T */ arg0, /** U */ arg1) {
    let /** ?function(T, U):R */ $function;
    return (
        $function = this.f_fn__lambdas_Lambdas_BiFunction_$LambdaAdaptor,
        $function(arg0, arg1));
  }
  // Default method forwarding stub.
  /** @override @template V @return {BiFunction<T, U, V>} */
  m_andThen__lambdas_Lambdas_Function(/** Lambdas_Function<?, ?> */ arg0) {
    return /**@type {BiFunction<T, U, V>}*/ (
        BiFunction
            .m_andThen__$default__lambdas_Lambdas_BiFunction__lambdas_Lambdas_Function(
                this, arg0));
  }

  static $clinit() {
    $LambdaAdaptor.$clinit = () => {};
    $LambdaAdaptor.$loadModules();
    j_l_Object.$clinit();
    BiFunction.$clinit();
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance instanceof $LambdaAdaptor;
  }

  static $loadModules() {}
}
BiFunction.$markImplementor($LambdaAdaptor);
$Util.$setClassMetadata(
    $LambdaAdaptor, 'lambdas.Lambdas$BiFunction$$LambdaAdaptor');

exports = $LambdaAdaptor;

//# sourceMappingURL=Lambdas$BiFunction$$LambdaAdaptor.js.map
