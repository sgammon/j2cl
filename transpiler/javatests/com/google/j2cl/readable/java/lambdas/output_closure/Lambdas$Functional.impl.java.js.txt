goog.module('lambdas.Lambdas.Functional$impl');

const $Util = goog.require('nativebootstrap.Util$impl');

let $LambdaAdaptor = goog.forwardDeclare('lambdas.Lambdas.Functional.$LambdaAdaptor$impl');

/**
 * @interface
 * @template T
 */
class Functional {
  /** @abstract @return {Functional<T>} */
  m_wrap__lambdas_Lambdas_Functional(/** Functional<T> */ f) {}
  /** @template T @return {Functional<T>} */
  static $adapt(/** ?function(Functional<T>):Functional<T> */ fn) {
    Functional.$clinit();
    return /**@type {!$LambdaAdaptor<T>}*/ (new $LambdaAdaptor(fn));
  }

  static $clinit() {
    Functional.$clinit = () => {};
    Functional.$loadModules();
  }

  static $markImplementor(/** Function */ ctor) {
    ctor.prototype.$implements__lambdas_Lambdas_Functional = true;
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance != null &&
        !!instance.$implements__lambdas_Lambdas_Functional;
  }

  static $loadModules() {
    $LambdaAdaptor =
        goog.module.get('lambdas.Lambdas.Functional.$LambdaAdaptor$impl');
  }
}
Functional.$markImplementor(/**@type {Function}*/ (Functional));
$Util.$setClassMetadataForInterface(Functional, 'lambdas.Lambdas$Functional');

exports = Functional;

//# sourceMappingURL=Lambdas$Functional.js.map
