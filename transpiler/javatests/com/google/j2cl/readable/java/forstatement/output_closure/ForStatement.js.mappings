[ForStatement] => [ForStatement]
[ForStatement] => [constructor]
[ForStatement] => [super();] "forstatement.ForStatement.<synthetic: ctor_js>"
[ForStatement] => [$create__]
[ForStatement] => [ForStatement.$clinit();] "forstatement.ForStatement.<synthetic: ctor_create>"
[ForStatement] => [let $instance = new ForStatement();] "forstatement.ForStatement.<synthetic: ctor_create>"
[ForStatement] => [$instance.$ctor__forstatement_ForStatement__();] "forstatement.ForStatement.<synthetic: ctor_create>"
[ForStatement] => [return $instance;] "forstatement.ForStatement.<synthetic: ctor_create>"
[ForStatement] => [$ctor__forstatement_ForStatement__]
[ForStatement] => [this.$ctor__java_lang_Object__();] "forstatement.ForStatement.<init>"
[test] => [m_test__]
[for (int i = 0, count = 0; i < 100; i++) {
      count++;
    }] => [for (let i = 0, count = 0; i < 100; i = i + 1 | 0) {
   count = count + 1 | 0;
  }] "forstatement.ForStatement.test"
[i] => [i] "i"
[count] => [count] "count"
[count++;] => [count = count + 1 | 0;] "forstatement.ForStatement.test"
[for (long l = 0, count = 0; l < 100; l++, l++) {
      count++;
    }] => [for (let l = $Long.fromInt(0), count_1 = $Long.fromInt(0); $LongUtils.$less(l, $Long.fromInt(100)); l = $LongUtils.$plus(l, $Long.fromInt(1)), l = $LongUtils.$plus(l, $Long.fromInt(1))) {
   count_1 = $LongUtils.$plus(count_1, $Long.fromInt(1));
  }] "forstatement.ForStatement.test"
[l] => [l] "l"
[count] => [count_1] "count"
[count++;] => [count_1 = $LongUtils.$plus(count_1, $Long.fromInt(1));] "forstatement.ForStatement.test"
[ForStatement] => [$clinit]
[ForStatement] => [ForStatement.$clinit = () =>{};] "forstatement.ForStatement.<clinit>"
[ForStatement] => [ForStatement.$loadModules();] "forstatement.ForStatement.<clinit>"
[ForStatement] => [j_l_Object.$clinit();] "forstatement.ForStatement.<clinit>"

