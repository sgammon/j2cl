goog.module('multipleabstractparents.MultipleAbstractParents.AbstractStringList$impl');

const AbstractList = goog.require('multipleabstractparents.MultipleAbstractParents.AbstractList$impl');
const IStringList = goog.require('multipleabstractparents.MultipleAbstractParents.IStringList$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let j_l_String = goog.forwardDeclare('java.lang.String$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');

/**
 * @abstract
 * @extends {AbstractList<?string>}
 * @implements {IStringList}
 */
class AbstractStringList extends AbstractList {
  /** @protected */
  constructor() {
    super();
  }

  $ctor__multipleabstractparents_MultipleAbstractParents_AbstractStringList__() {
    this.$ctor__multipleabstractparents_MultipleAbstractParents_AbstractList__();
  }
  // Bridge method.
  /** @override @return {?string} */
  m_getFoo__java_lang_Object(/** ?string */ arg0) {
    return this.m_getFoo__java_lang_String(
        /**@type {?string}*/ ($Casts.$to(arg0, j_l_String)));
  }
  // Specialized bridge method.
  /** @override @return {?string} */
  m_getFoo__java_lang_String(/** ?string */ arg0) {
    return super.m_getFoo__java_lang_Object(arg0);
  }

  static $clinit() {
    AbstractStringList.$clinit = () => {};
    AbstractStringList.$loadModules();
    AbstractList.$clinit();
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance instanceof AbstractStringList;
  }

  static $loadModules() {
    j_l_String = goog.module.get('java.lang.String$impl');
    $Casts = goog.module.get('vmbootstrap.Casts$impl');
  }
}
IStringList.$markImplementor(AbstractStringList);
$Util.$setClassMetadata(
    AbstractStringList,
    'multipleabstractparents.MultipleAbstractParents$AbstractStringList');

exports = AbstractStringList;

//# sourceMappingURL=MultipleAbstractParents$AbstractStringList.js.map
