goog.module('innerclassinitorder.InnerClassInitOrder.P1.P2$impl');

const P1 = goog.require('innerclassinitorder.InnerClassInitOrder.P1$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

/**
 * @template T2, T1
 * @extends {P1<T1>}
 */
class P2 extends P1 {
  /** @protected */
  constructor() {
    super();
    /**@type {P1<T1>}*/
    this.$outer_this__innerclassinitorder_InnerClassInitOrder_P1_P2;
  }
  // Factory method corresponding to constructor 'P2(P1)'.
  /** @template T2, T1 @return {!P2<T2, T1>} */
  static $create__innerclassinitorder_InnerClassInitOrder_P1(
      /** P1<T1> */ $outer_this) {
    P2.$clinit();
    let $instance = new P2();
    $instance
        .$ctor__innerclassinitorder_InnerClassInitOrder_P1_P2__innerclassinitorder_InnerClassInitOrder_P1(
            $outer_this);
    return $instance;
  }
  // Initialization from constructor 'P2(P1)'.

  $ctor__innerclassinitorder_InnerClassInitOrder_P1_P2__innerclassinitorder_InnerClassInitOrder_P1(
      /** P1<T1> */ $outer_this) {
    this.$ctor__innerclassinitorder_InnerClassInitOrder_P1_P2__innerclassinitorder_InnerClassInitOrder_P1__int(
        $outer_this, 1);
  }
  // Factory method corresponding to constructor 'P2(P1, int)'.
  /** @template T2, T1 @return {!P2<T2, T1>} */
  static $create__innerclassinitorder_InnerClassInitOrder_P1__int(
      /** P1<T1> */ $outer_this, /** number */ i) {
    P2.$clinit();
    let $instance = new P2();
    $instance
        .$ctor__innerclassinitorder_InnerClassInitOrder_P1_P2__innerclassinitorder_InnerClassInitOrder_P1__int(
            $outer_this, i);
    return $instance;
  }
  // Initialization from constructor 'P2(P1, int)'.

  $ctor__innerclassinitorder_InnerClassInitOrder_P1_P2__innerclassinitorder_InnerClassInitOrder_P1__int(
      /** P1<T1> */ $outer_this, /** number */ i) {
    this.$outer_this__innerclassinitorder_InnerClassInitOrder_P1_P2 =
        $outer_this;
    this.$ctor__innerclassinitorder_InnerClassInitOrder_P1__int(i);
  }

  static $clinit() {
    P2.$clinit = () => {};
    P2.$loadModules();
    P1.$clinit();
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance instanceof P2;
  }

  static $loadModules() {}
}
$Util.$setClassMetadata(P2, 'innerclassinitorder.InnerClassInitOrder$P1$P2');

exports = P2;

//# sourceMappingURL=InnerClassInitOrder$P1$P2.js.map
