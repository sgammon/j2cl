goog.module('innerclassinitorder.InnerClassInitOrder$impl');

const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let $1 = goog.forwardDeclare('innerclassinitorder.InnerClassInitOrder.$1$impl');
let $1AddNumber = goog.forwardDeclare('innerclassinitorder.InnerClassInitOrder.$1AddNumber$impl');
let $2 = goog.forwardDeclare('innerclassinitorder.InnerClassInitOrder.$2$impl');
let $3 = goog.forwardDeclare('innerclassinitorder.InnerClassInitOrder.$3$impl');
let $4 = goog.forwardDeclare('innerclassinitorder.InnerClassInitOrder.$4$impl');
let ESInnerSubclass = goog.forwardDeclare('innerclassinitorder.InnerClassInitOrder.ESInnerSubclass$impl');
let ESOuter = goog.forwardDeclare('innerclassinitorder.InnerClassInitOrder.ESOuter$impl');
let ESInner = goog.forwardDeclare('innerclassinitorder.InnerClassInitOrder.ESOuter.ESInner$impl');
let ESWGInnerSubclass = goog.forwardDeclare('innerclassinitorder.InnerClassInitOrder.ESWGInnerSubclass$impl');
let ESWGOuter = goog.forwardDeclare('innerclassinitorder.InnerClassInitOrder.ESWGOuter$impl');
let ESWGInner = goog.forwardDeclare('innerclassinitorder.InnerClassInitOrder.ESWGOuter.ESWGInner$impl');
let InnerClass = goog.forwardDeclare('innerclassinitorder.InnerClassInitOrder.InnerClass$impl');
let Outer = goog.forwardDeclare('innerclassinitorder.InnerClassInitOrder.Outer$impl');
let OuterIsNotSuper = goog.forwardDeclare('innerclassinitorder.InnerClassInitOrder.Outer.OuterIsNotSuper$impl');
let OuterIsSuper = goog.forwardDeclare('innerclassinitorder.InnerClassInitOrder.Outer.OuterIsSuper$impl');
let TestQualifiedSuperCall = goog.forwardDeclare('innerclassinitorder.InnerClassInitOrder.Outer.TestQualifiedSuperCall$impl');
let TestUnqualifiedSuperCall = goog.forwardDeclare('innerclassinitorder.InnerClassInitOrder.Outer.TestUnqualifiedSuperCall$impl');
let OuterRefFromSuperCtorCall = goog.forwardDeclare('innerclassinitorder.InnerClassInitOrder.OuterRefFromSuperCtorCall$impl');
let OuterRefFromThisCtorCall = goog.forwardDeclare('innerclassinitorder.InnerClassInitOrder.OuterRefFromThisCtorCall$impl');
let P1 = goog.forwardDeclare('innerclassinitorder.InnerClassInitOrder.P1$impl');
let P2 = goog.forwardDeclare('innerclassinitorder.InnerClassInitOrder.P1.P2$impl');
let P3 = goog.forwardDeclare('innerclassinitorder.InnerClassInitOrder.P1.P2.P3$impl');
let $Arrays = goog.forwardDeclare('vmbootstrap.Arrays$impl');
let $Asserts = goog.forwardDeclare('vmbootstrap.Asserts$impl');

class InnerClassInitOrder extends j_l_Object {
  /** @protected */
  constructor() {
    super();
    /**@type {number}*/
    this.f_number__innerclassinitorder_InnerClassInitOrder = 0;
    /**@type {Outer}*/
    this.f_outer__innerclassinitorder_InnerClassInitOrder_;
    /**@type {OuterIsSuper}*/
    this.f_outerIsSuper__innerclassinitorder_InnerClassInitOrder_;
  }
  /** @return {!InnerClassInitOrder} */
  static $create__() {
    InnerClassInitOrder.$clinit();
    let $instance = new InnerClassInitOrder();
    $instance.$ctor__innerclassinitorder_InnerClassInitOrder__();
    return $instance;
  }

  $ctor__innerclassinitorder_InnerClassInitOrder__() {
    this.$ctor__java_lang_Object__();
    this.$init___$p_innerclassinitorder_InnerClassInitOrder();
  }

  m_testOuterThisFromSuperCall__() {
    OuterRefFromSuperCtorCall.$create__innerclassinitorder_InnerClassInitOrder(
        this);
    $Asserts.$assert(
        this.f_number__innerclassinitorder_InnerClassInitOrder == 100);
  }

  m_testOuterThisFromThisCall__() {
    OuterRefFromThisCtorCall.$create__innerclassinitorder_InnerClassInitOrder(
        this);
    $Asserts.$assert(
        this.f_number__innerclassinitorder_InnerClassInitOrder == 1100);
  }

  m_testExtendsNested__() {
    let o = ESOuter.$create__();
    $Asserts.$assert(
        1 ==
        ESInner.$create__innerclassinitorder_InnerClassInitOrder_ESOuter(o)
            .f_value__innerclassinitorder_InnerClassInitOrder_ESOuter_ESInner);
    $Asserts.$assert(
        2 ==
        ESInner
            .$create__innerclassinitorder_InnerClassInitOrder_ESOuter__int(o, 2)
            .f_value__innerclassinitorder_InnerClassInitOrder_ESOuter_ESInner);
    $Asserts.$assert(
        1 ==
        ESInnerSubclass
            .$create__innerclassinitorder_InnerClassInitOrder_ESOuter(o)
            .f_value__innerclassinitorder_InnerClassInitOrder_ESOuter_ESInner);
    $Asserts.$assert(
        2 ==
        ESInnerSubclass
            .$create__int__innerclassinitorder_InnerClassInitOrder_ESOuter(2, o)
            .f_value__innerclassinitorder_InnerClassInitOrder_ESOuter_ESInner);
  }

  m_testExtendsNestedWithGenerics__() {
    let o = /**@type {!ESWGOuter<?string>}*/ (ESWGOuter.$create__());
    $Asserts.$assert(
        1 ==
        /**@type {!ESWGInner<?string>}*/
        (ESWGInner.$create__innerclassinitorder_InnerClassInitOrder_ESWGOuter(
             o))
            .f_value__innerclassinitorder_InnerClassInitOrder_ESWGOuter_ESWGInner);
    $Asserts.$assert(
        2 ==
        /**@type {!ESWGInner<?string>}*/
        (ESWGInner
             .$create__innerclassinitorder_InnerClassInitOrder_ESWGOuter__int(
                 o, 2))
            .f_value__innerclassinitorder_InnerClassInitOrder_ESWGOuter_ESWGInner);
    $Asserts.$assert(
        1 ==
        ESWGInnerSubclass
            .$create__innerclassinitorder_InnerClassInitOrder_ESWGOuter(o)
            .f_value__innerclassinitorder_InnerClassInitOrder_ESWGOuter_ESWGInner);
    $Asserts.$assert(
        2 ==
        ESWGInnerSubclass
            .$create__int__innerclassinitorder_InnerClassInitOrder_ESWGOuter(
                2, o)
            .f_value__innerclassinitorder_InnerClassInitOrder_ESWGOuter_ESWGInner);
  }

  m_testInnerClassCtors__() {
    let p1 = /**@type {!P1<*>}*/ (P1.$create__());
    $Asserts.$assert(
        1 == p1.f_value__innerclassinitorder_InnerClassInitOrder_P1);
    $Asserts.$assert(
        2 == /**@type {!P1<*>}*/
             (P1.$create__int(2))
                 .f_value__innerclassinitorder_InnerClassInitOrder_P1);
    let p2 = /**@type {!P2<*, *>}*/ (
        P2.$create__innerclassinitorder_InnerClassInitOrder_P1(p1));
    $Asserts.$assert(
        1 == p2.f_value__innerclassinitorder_InnerClassInitOrder_P1);
    $Asserts.$assert(
        2 ==
        /**@type {!P2<*, *>}*/
        (P2.$create__innerclassinitorder_InnerClassInitOrder_P1__int(p1, 2))
            .f_value__innerclassinitorder_InnerClassInitOrder_P1);
    $Asserts.$assert(
        1 == /**@type {!P3<*, *, *>}*/
             (P3.$create__innerclassinitorder_InnerClassInitOrder_P1_P2(p2))
                 .f_value__innerclassinitorder_InnerClassInitOrder_P1);
    $Asserts.$assert(
        2 ==
        /**@type {!P3<*, *, *>}*/
        (P3.$create__innerclassinitorder_InnerClassInitOrder_P1_P2__int(p2, 2))
            .f_value__innerclassinitorder_InnerClassInitOrder_P1);
  }

  m_testInnerClassInitialization__() {
    InnerClass.$create__innerclassinitorder_InnerClassInitOrder(this);
    $Asserts.$assert(
        this.f_number__innerclassinitorder_InnerClassInitOrder == 1111);
  }

  m_testInnerClassLoop__() {
    let results =
        /**@type {!Array<$1AddNumber>}*/ ($Arrays.$create([10], $1AddNumber));
    for (let i = 0; i < 10; i = i + 1 | 0) {
      let ap =
          $1.$create__innerclassinitorder_InnerClassInitOrder__int(this, i);
      $Arrays.$set(results, i, ap);
    }
    for (let $array = results, $index = 0; $index < $array.length; $index++) {
      let theAp = $array[$index];
      theAp.m_act__();
    }
    $Asserts.$assert(
        this.f_number__innerclassinitorder_InnerClassInitOrder == 1156);
  }

  m_testOuterIsNotSuper__() {
    let x =
        OuterIsNotSuper.$create__innerclassinitorder_InnerClassInitOrder_Outer(
            this.f_outerIsSuper__innerclassinitorder_InnerClassInitOrder_);
    $Asserts.$assert(2 == x.m_getValue__());
  }

  m_testOuterIsNotSuperAnon__() {
    let x =
        $2.$create__innerclassinitorder_InnerClassInitOrder__innerclassinitorder_InnerClassInitOrder_Outer_OuterIsSuper(
            this,
            this.f_outerIsSuper__innerclassinitorder_InnerClassInitOrder_);
    $Asserts.$assert(2 == x.m_getValue__());
  }

  m_testQualifiedSuperCall__() {
    let x = TestQualifiedSuperCall.$create__();
    $Asserts.$assert(2 == x.m_getValue__());
  }

  m_testQualifiedSuperCallAnon__() {
    let x = $3.$create__innerclassinitorder_InnerClassInitOrder(this);
    $Asserts.$assert(2 == x.m_getValue__());
  }

  m_testSuperDispatch__() {
    $Asserts.$assert(
        1 ==
        this.f_outerIsSuper__innerclassinitorder_InnerClassInitOrder_
            .m_checkDispatchFromSub1__());
    $Asserts.$assert(
        1 ==
        this.f_outerIsSuper__innerclassinitorder_InnerClassInitOrder_
            .m_checkDispatchFromSub2__());
  }

  m_testUnqualifiedAlloc__() {
    let x = this.f_outerIsSuper__innerclassinitorder_InnerClassInitOrder_
                .m_unqualifiedAlloc__();
    $Asserts.$assert(2 == x.m_getValue__());
  }

  m_testUnqualifiedSuperCall__() {
    let x =
        TestUnqualifiedSuperCall
            .$create__innerclassinitorder_InnerClassInitOrder_Outer(
                this.f_outerIsSuper__innerclassinitorder_InnerClassInitOrder_);
    $Asserts.$assert(2 == x.m_getValue__());
  }

  m_testUnqualifiedSuperCallAnon__() {
    let x =
        $4.$create__innerclassinitorder_InnerClassInitOrder__innerclassinitorder_InnerClassInitOrder_Outer_OuterIsSuper(
            this,
            this.f_outerIsSuper__innerclassinitorder_InnerClassInitOrder_);
    $Asserts.$assert(2 == x.m_getValue__());
  }

  static m_main__arrayOf_java_lang_String(/** Array<?string> */ args) {
    InnerClassInitOrder.$clinit();
    let m = InnerClassInitOrder.$create__();
    m.m_testOuterThisFromSuperCall__();
    m.m_testOuterThisFromThisCall__();
    m.m_testExtendsNested__();
    m.m_testExtendsNestedWithGenerics__();
    m.m_testInnerClassCtors__();
    m.m_testInnerClassInitialization__();
    m.m_testInnerClassLoop__();
    m.m_testOuterIsNotSuper__();
    m.m_testOuterIsNotSuperAnon__();
    m.m_testQualifiedSuperCall__();
    m.m_testQualifiedSuperCallAnon__();
    m.m_testSuperDispatch__();
    m.m_testUnqualifiedAlloc__();
    m.m_testUnqualifiedSuperCall__();
    m.m_testUnqualifiedSuperCallAnon__();
  }
  /** @private */
  $init___$p_innerclassinitorder_InnerClassInitOrder() {
    this.f_number__innerclassinitorder_InnerClassInitOrder = 0;
    this.f_outer__innerclassinitorder_InnerClassInitOrder_ =
        Outer.$create__int(1);
    this.f_outerIsSuper__innerclassinitorder_InnerClassInitOrder_ =
        OuterIsSuper
            .$create__innerclassinitorder_InnerClassInitOrder_Outer__int(
                this.f_outer__innerclassinitorder_InnerClassInitOrder_, 2);
  }

  static $clinit() {
    InnerClassInitOrder.$clinit = () => {};
    InnerClassInitOrder.$loadModules();
    j_l_Object.$clinit();
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance instanceof InnerClassInitOrder;
  }

  static $loadModules() {
    $1 = goog.module.get('innerclassinitorder.InnerClassInitOrder.$1$impl');
    $1AddNumber = goog.module.get(
        'innerclassinitorder.InnerClassInitOrder.$1AddNumber$impl');
    $2 = goog.module.get('innerclassinitorder.InnerClassInitOrder.$2$impl');
    $3 = goog.module.get('innerclassinitorder.InnerClassInitOrder.$3$impl');
    $4 = goog.module.get('innerclassinitorder.InnerClassInitOrder.$4$impl');
    ESInnerSubclass = goog.module.get(
        'innerclassinitorder.InnerClassInitOrder.ESInnerSubclass$impl');
    ESOuter =
        goog.module.get('innerclassinitorder.InnerClassInitOrder.ESOuter$impl');
    ESInner = goog.module.get(
        'innerclassinitorder.InnerClassInitOrder.ESOuter.ESInner$impl');
    ESWGInnerSubclass = goog.module.get(
        'innerclassinitorder.InnerClassInitOrder.ESWGInnerSubclass$impl');
    ESWGOuter = goog.module.get(
        'innerclassinitorder.InnerClassInitOrder.ESWGOuter$impl');
    ESWGInner = goog.module.get(
        'innerclassinitorder.InnerClassInitOrder.ESWGOuter.ESWGInner$impl');
    InnerClass = goog.module.get(
        'innerclassinitorder.InnerClassInitOrder.InnerClass$impl');
    Outer =
        goog.module.get('innerclassinitorder.InnerClassInitOrder.Outer$impl');
    OuterIsNotSuper = goog.module.get(
        'innerclassinitorder.InnerClassInitOrder.Outer.OuterIsNotSuper$impl');
    OuterIsSuper = goog.module.get(
        'innerclassinitorder.InnerClassInitOrder.Outer.OuterIsSuper$impl');
    TestQualifiedSuperCall = goog.module.get(
        'innerclassinitorder.InnerClassInitOrder.Outer.TestQualifiedSuperCall$impl');
    TestUnqualifiedSuperCall = goog.module.get(
        'innerclassinitorder.InnerClassInitOrder.Outer.TestUnqualifiedSuperCall$impl');
    OuterRefFromSuperCtorCall = goog.module.get(
        'innerclassinitorder.InnerClassInitOrder.OuterRefFromSuperCtorCall$impl');
    OuterRefFromThisCtorCall = goog.module.get(
        'innerclassinitorder.InnerClassInitOrder.OuterRefFromThisCtorCall$impl');
    P1 = goog.module.get('innerclassinitorder.InnerClassInitOrder.P1$impl');
    P2 = goog.module.get('innerclassinitorder.InnerClassInitOrder.P1.P2$impl');
    P3 = goog.module.get(
        'innerclassinitorder.InnerClassInitOrder.P1.P2.P3$impl');
    $Arrays = goog.module.get('vmbootstrap.Arrays$impl');
    $Asserts = goog.module.get('vmbootstrap.Asserts$impl');
  }
}
$Util.$setClassMetadata(
    InnerClassInitOrder, 'innerclassinitorder.InnerClassInitOrder');

exports = InnerClassInitOrder;

//# sourceMappingURL=InnerClassInitOrder.js.map
