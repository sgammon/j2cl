goog.module('genericmethod.GenericMethod$impl');

const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let $1 = goog.forwardDeclare('genericmethod.GenericMethod.$1$impl');
let $1LocalClass = goog.forwardDeclare('genericmethod.GenericMethod.$1LocalClass$impl');
let Container = goog.forwardDeclare('genericmethod.GenericMethod.Container$impl');
let Content = goog.forwardDeclare('genericmethod.GenericMethod.Content$impl');
let SuperContainer = goog.forwardDeclare('genericmethod.GenericMethod.SuperContainer$impl');
let Error = goog.forwardDeclare('java.lang.Error$impl');
let Exception = goog.forwardDeclare('java.lang.Exception$impl');
let Number = goog.forwardDeclare('java.lang.Number$impl');
let j_l_String = goog.forwardDeclare('java.lang.String$impl');
let $Arrays = goog.forwardDeclare('vmbootstrap.Arrays$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');

/**
 * @template T
 */
class GenericMethod extends j_l_Object {
  /** @protected */
  constructor() {
    super();
  }
  /** @template T @return {!GenericMethod<T>} */
  static $create__() {
    GenericMethod.$clinit();
    let $instance = new GenericMethod();
    $instance.$ctor__genericmethod_GenericMethod__();
    return $instance;
  }

  $ctor__genericmethod_GenericMethod__() {
    this.$ctor__java_lang_Object__();
  }
  /** @template T_1, S */
  m_foo__java_lang_Object__java_lang_Object(/** T_1 */ f, /** S */ s) {}

  m_fun__java_lang_Object(/** * */ o) {}
  /** @template T_1 */
  m_fun__java_lang_Exception(/** T_1 */ t) {}
  /** @template T_1 */
  m_fun__java_lang_Error(/** T_1 */ t) {
    $1.$create__genericmethod_GenericMethod(this);
    $1LocalClass.$create__genericmethod_GenericMethod(this);
  }
  /** @template T_1 @return {GenericMethod<T_1>} */
  m_bar__() {
    return null;
  }
  /** @template T_1 @return {Array<T_1>} */
  m_fun__arrayOf_java_lang_Object(/** Array<T_1> */ array) {
    return array;
  }
  /** @template T_1 @return {T_1} */
  m_checked__() {
    return null;
  }
  /** @template T_1 @return {T_1} */
  m_unchecked__() {
    return null;
  }

  m_test__() {
    let g = /**@type {!GenericMethod<(Number|number)>}*/ (
        GenericMethod.$create__());
    g.m_foo__java_lang_Object__java_lang_Object(g, g);
    g.m_foo__java_lang_Object__java_lang_Object(
        Error.$create__(), Exception.$create__());
    g.m_fun__java_lang_Object(j_l_Object.$create__());
    g.m_fun__java_lang_Exception(Exception.$create__());
    g.m_fun__java_lang_Error(Error.$create__());
    g.m_fun__arrayOf_java_lang_Object(
        /**@type {!Array<?string>}*/ ($Arrays.$init(['asdf'], j_l_String)));
    let s = /**@type {?string}*/ ($Casts.$to(this.m_checked__(), j_l_String));
    s = /**@type {?string}*/ (this.m_unchecked__());
  }

  static m_acceptsContent__genericmethod_GenericMethod_Content(
      /** Content */ content) {
    GenericMethod.$clinit();
  }

  static m_acceptsString__java_lang_String(/** ?string */ string_1) {
    GenericMethod.$clinit();
  }

  static m_testErasureCast_wildcard__() {
    GenericMethod.$clinit();
    let list = null;
    let content = /**@type {Container<Content>}*/ (
                      $Casts.$to(list.getAtIndex(0), Container))
                      .m_get___$pp_genericmethod();
    GenericMethod.m_acceptsString__java_lang_String(
        content.m_getProp___$pp_genericmethod());
    GenericMethod.m_acceptsContent__genericmethod_GenericMethod_Content(
        content);
    let nestedWildcardList = null;
    let nestedContent =
        /**@type {Container}*/ (
            /**@type {SuperContainer<Container>}*/ (
                $Casts.$to(nestedWildcardList.getAtIndex(0), SuperContainer))
                .m_get___$pp_genericmethod())
            .m_get___$pp_genericmethod();
    GenericMethod.m_acceptsString__java_lang_String(
        nestedContent.m_getProp___$pp_genericmethod());
    GenericMethod.m_acceptsContent__genericmethod_GenericMethod_Content(
        nestedContent);
    let deepWildcardList = null;
    let deepContent =
        /**@type {SuperContainer<Container<?>>}*/ (
            $Casts.$to(deepWildcardList.getAtIndex(0), SuperContainer))
            .m_get___$pp_genericmethod()
            .m_get___$pp_genericmethod();
    GenericMethod.m_acceptsString__java_lang_String(
        deepContent.m_getProp___$pp_genericmethod());
    GenericMethod.m_acceptsContent__genericmethod_GenericMethod_Content(
        deepContent);
  }
  /** @template CT, C */
  static m_testErasureCast_typeVariable__() {
    GenericMethod.$clinit();
    let list = null;
    let content =
        /**@type {Container<C>}*/ ($Casts.$to(list.getAtIndex(0), Container))
            .m_get___$pp_genericmethod();
    GenericMethod.m_acceptsString__java_lang_String(
        content.m_getProp___$pp_genericmethod());
    GenericMethod.m_acceptsContent__genericmethod_GenericMethod_Content(
        content);
    let nestedTypeVariableList = null;
    let nestedContent =
        /**@type {Container}*/ (
            /**@type {SuperContainer<CT>}*/ (
                $Casts.$to(
                    nestedTypeVariableList.getAtIndex(0), SuperContainer))
                .m_get___$pp_genericmethod())
            .m_get___$pp_genericmethod();
    GenericMethod.m_acceptsString__java_lang_String(
        nestedContent.m_getProp___$pp_genericmethod());
    GenericMethod.m_acceptsContent__genericmethod_GenericMethod_Content(
        nestedContent);
    let deepTypeVariableList = null;
    let deepContent =
        /**@type {SuperContainer<Container<C>>}*/ (
            $Casts.$to(deepTypeVariableList.getAtIndex(0), SuperContainer))
            .m_get___$pp_genericmethod()
            .m_get___$pp_genericmethod();
    GenericMethod.m_acceptsString__java_lang_String(
        deepContent.m_getProp___$pp_genericmethod());
    GenericMethod.m_acceptsContent__genericmethod_GenericMethod_Content(
        deepContent);
  }

  static $clinit() {
    GenericMethod.$clinit = () => {};
    GenericMethod.$loadModules();
    j_l_Object.$clinit();
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance instanceof GenericMethod;
  }

  static $loadModules() {
    $1 = goog.module.get('genericmethod.GenericMethod.$1$impl');
    $1LocalClass =
        goog.module.get('genericmethod.GenericMethod.$1LocalClass$impl');
    Container = goog.module.get('genericmethod.GenericMethod.Container$impl');
    SuperContainer =
        goog.module.get('genericmethod.GenericMethod.SuperContainer$impl');
    Error = goog.module.get('java.lang.Error$impl');
    Exception = goog.module.get('java.lang.Exception$impl');
    j_l_String = goog.module.get('java.lang.String$impl');
    $Arrays = goog.module.get('vmbootstrap.Arrays$impl');
    $Casts = goog.module.get('vmbootstrap.Casts$impl');
  }
}
$Util.$setClassMetadata(GenericMethod, 'genericmethod.GenericMethod');

exports = GenericMethod;

//# sourceMappingURL=GenericMethod.js.map
