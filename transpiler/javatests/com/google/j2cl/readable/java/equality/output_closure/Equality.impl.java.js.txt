goog.module('equality.Equality$impl');

const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let Double = goog.forwardDeclare('java.lang.Double$impl');
let Float = goog.forwardDeclare('java.lang.Float$impl');
let $Equality = goog.forwardDeclare('nativebootstrap.Equality$impl');
let $Asserts = goog.forwardDeclare('vmbootstrap.Asserts$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');

class Equality extends j_l_Object {
  /** @protected */
  constructor() {
    super();
  }
  /** @return {!Equality} */
  static $create__() {
    Equality.$clinit();
    let $instance = new Equality();
    $instance.$ctor__equality_Equality__();
    return $instance;
  }

  $ctor__equality_Equality__() {
    this.$ctor__java_lang_Object__();
  }

  m_test__() {
    {
      $Asserts.$assert(false == false);
      $Asserts.$assert(0 != 1);
    }
    {
      $Asserts.$assert(
          !$Equality.$same(j_l_Object.$create__(), j_l_Object.$create__()));
    }
    {
      $Asserts.$assert($Equality.$same(
          /**@type {?number}*/ ($Casts.$to(0, Double)),
          /**@type {?number}*/ ($Casts.$to(0, Double))));
    }
    {
      $Asserts.$assert($Equality.$same(
          Float.m_valueOf__float(0), Float.m_valueOf__float(0)));
    }
    {
      $Asserts.$assert(!$Equality.$same(null, j_l_Object.$create__()));
      $Asserts.$assert(!$Equality.$same(j_l_Object.$create__(), null));
    }
  }

  static $clinit() {
    Equality.$clinit = () => {};
    Equality.$loadModules();
    j_l_Object.$clinit();
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance instanceof Equality;
  }

  static $loadModules() {
    Double = goog.module.get('java.lang.Double$impl');
    Float = goog.module.get('java.lang.Float$impl');
    $Equality = goog.module.get('nativebootstrap.Equality$impl');
    $Asserts = goog.module.get('vmbootstrap.Asserts$impl');
    $Casts = goog.module.get('vmbootstrap.Casts$impl');
  }
}
$Util.$setClassMetadata(Equality, 'equality.Equality');

exports = Equality;

//# sourceMappingURL=Equality.js.map
