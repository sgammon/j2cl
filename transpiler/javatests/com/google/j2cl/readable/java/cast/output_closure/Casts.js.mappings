[Casts] => [Casts]
[Casts] => [constructor]
[Casts] => [super();] "cast.Casts.<synthetic: ctor_js>"
[Casts] => [$create__]
[Casts] => [Casts.$clinit();] "cast.Casts.<synthetic: ctor_create>"
[Casts] => [let $instance = new Casts();] "cast.Casts.<synthetic: ctor_create>"
[Casts] => [$instance.$ctor__cast_Casts__();] "cast.Casts.<synthetic: ctor_create>"
[Casts] => [return $instance;] "cast.Casts.<synthetic: ctor_create>"
[Casts] => [$ctor__cast_Casts__]
[Casts] => [this.$ctor__java_lang_Object__();] "cast.Casts.<init>"
[testCastToClass] => [m_testCastToClass__]
[Object o = new Object();] => [let o = j_l_Object.$create__();] "cast.Casts.testCastToClass"
[o] => [o] "o"
[Casts c = (Casts) o;] => [let c = /**@type {Casts}*/ ($Casts.$to(o, Casts));] "cast.Casts.testCastToClass"
[c] => [c] "c"
[testCasToInterface] => [m_testCasToInterface__]
[Object o = new Object();] => [let o = j_l_Object.$create__();] "cast.Casts.testCasToInterface"
[o] => [o] "o"
[Serializable s = (Serializable) o;] => [let s = /**@type {(Serializable|Array)}*/ ($Casts.$to(o, Serializable));] "cast.Casts.testCasToInterface"
[s] => [s] "s"
[testCastToBoxedType] => [m_testCastToBoxedType__]
[Object o = new Integer(1);] => [let o = Integer.$create__int(1);] "cast.Casts.testCastToBoxedType"
[o] => [o] "o"
[Byte b = (Byte) o;] => [let b = /**@type {Byte}*/ ($Casts.$to(o, Byte));] "cast.Casts.testCastToBoxedType"
[b] => [b] "b"
[Double d = (Double) o;] => [let d = /**@type {?number}*/ ($Casts.$to(o, Double));] "cast.Casts.testCastToBoxedType"
[d] => [d] "d"
[Float f = (Float) o;] => [let f = /**@type {Float}*/ ($Casts.$to(o, Float));] "cast.Casts.testCastToBoxedType"
[f] => [f] "f"
[Integer i = (Integer) o;] => [let i = /**@type {Integer}*/ ($Casts.$to(o, Integer));] "cast.Casts.testCastToBoxedType"
[i] => [i] "i"
[Long l = (Long) o;] => [let l = /**@type {Long}*/ ($Casts.$to(o, Long));] "cast.Casts.testCastToBoxedType"
[l] => [l] "l"
[Short s = (Short) o;] => [let s = /**@type {Short}*/ ($Casts.$to(o, Short));] "cast.Casts.testCastToBoxedType"
[s] => [s] "s"
[Number n = (Number) o;] => [let n = /**@type {(Number|number)}*/ ($Casts.$to(o, Number));] "cast.Casts.testCastToBoxedType"
[n] => [n] "n"
[Character c = (Character) o;] => [let c = /**@type {Character}*/ ($Casts.$to(o, Character));] "cast.Casts.testCastToBoxedType"
[c] => [c] "c"
[Boolean bool = (Boolean) o;] => [let bool = /**@type {?boolean}*/ ($Casts.$to(o, Boolean));] "cast.Casts.testCastToBoxedType"
[bool] => [bool] "bool"
[testCastToArray] => [m_testCastToArray__]
[Object foo = (Object[]) null;] => [let foo = /**@type {Array<*>}*/ (null);] "cast.Casts.testCastToArray"
[foo] => [foo] "foo"
[Object bar = (Object[][]) null;] => [let bar = /**@type {Array<Array<*>>}*/ (null);] "cast.Casts.testCastToArray"
[bar] => [bar] "bar"
[Casts] => [$clinit]
[Casts] => [Casts.$clinit = () =>{};] "cast.Casts.<clinit>"
[Casts] => [Casts.$loadModules();] "cast.Casts.<clinit>"
[Casts] => [j_l_Object.$clinit();] "cast.Casts.<clinit>"

