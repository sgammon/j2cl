goog.module('cast.Casts$impl');

const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let Serializable = goog.forwardDeclare('java.io.Serializable$impl');
let Boolean = goog.forwardDeclare('java.lang.Boolean$impl');
let Byte = goog.forwardDeclare('java.lang.Byte$impl');
let Character = goog.forwardDeclare('java.lang.Character$impl');
let Double = goog.forwardDeclare('java.lang.Double$impl');
let Float = goog.forwardDeclare('java.lang.Float$impl');
let Integer = goog.forwardDeclare('java.lang.Integer$impl');
let Long = goog.forwardDeclare('java.lang.Long$impl');
let Number = goog.forwardDeclare('java.lang.Number$impl');
let Short = goog.forwardDeclare('java.lang.Short$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');

class Casts extends j_l_Object {
  /** @protected */
  constructor() {
    super();
  }
  /** @return {!Casts} */
  static $create__() {
    Casts.$clinit();
    let $instance = new Casts();
    $instance.$ctor__cast_Casts__();
    return $instance;
  }

  $ctor__cast_Casts__() {
    this.$ctor__java_lang_Object__();
  }

  m_testCastToClass__() {
    let o = j_l_Object.$create__();
    let c = /**@type {Casts}*/ ($Casts.$to(o, Casts));
  }

  m_testCasToInterface__() {
    let o = j_l_Object.$create__();
    let s = /**@type {(Serializable|Array)}*/ ($Casts.$to(o, Serializable));
  }

  m_testCastToBoxedType__() {
    let o = Integer.$create__int(1);
    let b = /**@type {Byte}*/ ($Casts.$to(o, Byte));
    let d = /**@type {?number}*/ ($Casts.$to(o, Double));
    let f = /**@type {Float}*/ ($Casts.$to(o, Float));
    let i = /**@type {Integer}*/ ($Casts.$to(o, Integer));
    let l = /**@type {Long}*/ ($Casts.$to(o, Long));
    let s = /**@type {Short}*/ ($Casts.$to(o, Short));
    let n = /**@type {(Number|number)}*/ ($Casts.$to(o, Number));
    let c = /**@type {Character}*/ ($Casts.$to(o, Character));
    let bool = /**@type {?boolean}*/ ($Casts.$to(o, Boolean));
  }

  m_testCastToArray__() {
    let foo = /**@type {Array<*>}*/ (null);
    let bar = /**@type {Array<Array<*>>}*/ (null);
  }

  static $clinit() {
    Casts.$clinit = () => {};
    Casts.$loadModules();
    j_l_Object.$clinit();
  }
  /** @return {boolean} */
  static $isInstance(/** ? */ instance) {
    return instance instanceof Casts;
  }

  static $loadModules() {
    Serializable = goog.module.get('java.io.Serializable$impl');
    Boolean = goog.module.get('java.lang.Boolean$impl');
    Byte = goog.module.get('java.lang.Byte$impl');
    Character = goog.module.get('java.lang.Character$impl');
    Double = goog.module.get('java.lang.Double$impl');
    Float = goog.module.get('java.lang.Float$impl');
    Integer = goog.module.get('java.lang.Integer$impl');
    Long = goog.module.get('java.lang.Long$impl');
    Number = goog.module.get('java.lang.Number$impl');
    Short = goog.module.get('java.lang.Short$impl');
    $Casts = goog.module.get('vmbootstrap.Casts$impl');
  }
}
$Util.$setClassMetadata(Casts, 'cast.Casts');

exports = Casts;

//# sourceMappingURL=Casts.js.map
