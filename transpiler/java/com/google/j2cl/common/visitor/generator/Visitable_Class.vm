package ${packageName};

import com.google.common.base.Preconditions;
import com.google.j2cl.common.visitor.ListVisitor;
import com.google.j2cl.common.visitor.Processor;
import com.google.j2cl.common.visitor.ProcessorError;

public class Visitor_${className} {

  public static ${visitableClass.TopClassName} visit(Processor processor, ${className} node) {
    ${visitableClass.TopClassName} result = node;

    ProcessorPrivate processorImpl = (ProcessorPrivate) processor;
    pushContext(processor, node);

    try {
      if (processorImpl.shouldProcess${className}(node)) {
        visitMembers(processorImpl, node);
      }
      result = processorImpl.postProcess${className}(node);
    } catch (RuntimeException|Error e) {
      if (e instanceof ProcessorError) {
        throw e;
      }
      throw new ProcessorError(processorImpl.getCurrentContext(), node, e);
    }

    popContext(processor, node);
    return result;
  }

  static void pushContext(Processor processor, ${className} node) {
#if(${visitableClass.isTop()})
#else
    Visitor_${visitableClass.SuperclassName}.pushContext(processor, node);
#end
#if (${visitableClass.isContext()})
    ProcessorPrivate processorImpl = (ProcessorPrivate) processor;
    processorImpl.push${className}(node);
#end
  }

  static void popContext(Processor processor, ${className} node) {
#if (${visitableClass.isContext()})
    ProcessorPrivate processorImpl = (ProcessorPrivate) processor;
    Preconditions.checkState(processorImpl.pop${className}() == node);
#end
#if(${visitableClass.isTop()})
#else
    Visitor_${visitableClass.SuperclassName}.popContext(processor, node);
#end
  }

  static void visitMembers(Processor processor, ${className} node) {
    ProcessorPrivate processorImpl = (ProcessorPrivate) processor;
#if(${visitableClass.isTop()})
#else
    Visitor_${visitableClass.SuperclassName}.visitMembers(processorImpl, node);
#end
#foreach($field in $fields)
#if(${field.isNullable()})
    if (node.${field.Name} != null) {
#end
#if(${field.isList()})
      ListVisitor.visit(
          node.${field.Name},
          n -> (${field.ComponentTypeName}) n.accept(processorImpl));
#elseif (${field.isNullable()})
      node.${field.Name} = (${field.TypeName}) node.${field.Name}.accept(processorImpl);
#else
      node.${field.Name} = (${field.TypeName}) Preconditions.checkNotNull(
      node.${field.Name}.accept(processorImpl),
          "Field \"${field.Name}\" in class \"${className}\" cannot be null");
#end
#if(${field.isNullable()})
    }
#end
#end
  }
}
